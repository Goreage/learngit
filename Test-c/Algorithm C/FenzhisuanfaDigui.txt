#include<stdio.h>
#define MaxN 8
//a为传入数组名，k为数组长度
int MaxseqSum1(int List[], int N);


//2为二分查找
int Max3(int a, int b, int c);
int MaxSeqSum2(int List[], int N);
int DivideAndConquer(int a[], int left, int right);

//3为在线处理法
int MaxSeqSum3(int List[], int N);
int main()
{
	//int t;
	//int N;
	int List[] = {4, -3, 5, -2, -1, 2, 6, -2};
	/*int List[MaxN];
	for(t=0; t <= MaxN - 1; t++){
		scanf_s("%d", &List[t]);
	}*/
	//int length = sizeof(List) / sizeof(List[0]);
	printf("%d", MaxSeqSum2(List , 8));
	return 0;
}

int Max3(int A, int B, int C) {
	return A > B ? A > C ? A : C : B > C ? B : C;
}
int DivideAndConquer(int List[], int left, int right) {
	/*
	分治法求List[left]到List[right]的最大子列和
	*/
	int MaxLeftSum, MaxRightSum;/*存放左右子列问题的解*/
	int MaxLeftBorderSum, MaxRightBorderSum;/*存放跨分界线的结果*/

	int LeftBorderSum, RightBorderSum;
	int center, i;

	if (left == right) {/*递归终止条件，子列只有一个数字*/
		if (List[left] > 0) return List[left];
		else return 0;
	}
	/*下列是“分”的过程*/
	center = (left + right) / 2; /*找到中分点*/
	/*递归求得两边子列的最大和*/
	MaxLeftSum = DivideAndConquer(List, left, center);
	MaxRightSum = DivideAndConquer(List, center + 1, right);

	/*下面求跨分界线的最大子列和*/
	MaxLeftBorderSum = 0; LeftBorderSum = 0;
	for (i = center; i >= left; i--) {/*从中线向左扫描*/
		LeftBorderSum += List[i];
		if (LeftBorderSum > MaxLeftBorderSum)
			MaxLeftBorderSum = LeftBorderSum;
	}/*左边扫描结束*/

	MaxRightBorderSum = 0; RightBorderSum = 0;
	for (i = center + 1; i <= right; i++) {/*从中线向右扫描*/
		RightBorderSum += List[i];
		if (RightBorderSum > MaxRightBorderSum)
			MaxRightBorderSum = RightBorderSum;
	}/*右边扫描结束*/

	/*下面返回“治”的结果*/
	return Max3(MaxLeftSum, MaxRightSum, MaxRightBorderSum + MaxLeftBorderSum);
} 
int MaxSeqSum2(int List[], int N) {
	/*保持与前两种算法相同的函数接口*/
	return DivideAndConquer(List, 0, N - 1);
}

int MaxSeqSum1(int List[], int N) {/*复杂度为n平方*/
	int MaxSum = 0;
	for (int i = 0; i <= N - 1; i++) {
		int ThisSum = 0;
		for (int j = i; j <= N - 1; j++) {
			ThisSum += List[j];
			if (ThisSum > MaxSum) {
				MaxSum = ThisSum;
				}
		}
	}
	return MaxSum;
}

int MaxSeqSum3(int List[], int N) {/*方法为在线处理法*/
	int ThisSum = 0;
	int MaxSum = 0;
	for (int i = 0; i <= N - 1; i++) {
		ThisSum = ThisSum + List[i];
		if (ThisSum > MaxSum)
			MaxSum = ThisSum;
		else if (ThisSum < 0) {
			ThisSum = 0;
		}
	}
	return MaxSum;
}