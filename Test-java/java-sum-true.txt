欢迎大家来到浪曦
主要任务是了解计算机 安装JDK环境
计算机基础
计算机主要是由软件和硬件组成

硬件：
	CPU  显卡  内存  硬盘(SSD HDD) 主板  电源  机箱  散热器
	显示器  键盘  鼠标  耳机  音响
最主要的内容：
	CPU 内存
	CPU: 中央处理器 处理计算机的数据 骁龙845 500+ ARM i7 i5 i3 
	内存: 随机存储器 断电数据消失 ROM RAM
	硬盘: 永久存储器 机械硬盘 HDD 固态硬盘 SSD  混合盘
	GPU: 显卡 1080ti 4999 ~ 5999 10000 比特币
程序考虑的重点是: CPU的使用率和内存的占用率

硬件就相当于地皮，软件的运行平台

软件:
	操作系统：
		Windows 95/98 XP 2003 vista windows 7/8/10
		Linux Unix BSD macOS 
		iOS 手机
	操作系统是给应用程序提供运行的环境和平台
	
	应用程序:
		Android 【面试题】Android不是操作系统，是应用程序
		QQ 微信 淘宝 快手 抖音
	应用程序是让用户更好的操作计算机
 
用户如何操作计算机
1. 图形化界面
	windows macOS QQ 微信 人机体验很好，友好，但是效率低
2. 命令行操作
	DOS 命令 Linux操作命令 (一定要会)
	功能特别强大 效率高，但是对于普通用户来说，就是一堆乱码

在Windows操作下如何打开命令行：
	a) 开始按钮 -> 所有程序 -> 附件 -> 命令提示符
	b) 开始按钮 -> 搜索程序和文件 -> 输入cmd 回车
	c) windows + R -> 输入cmd  回车
常用DOS命令: 【掌握 默写】
1. dir 查看当前工作目录下的文件和文件夹
2. cd 切换工作目录
	例如：
		cd Desktop 把当前工作目录。切换到桌面
	路径操作的细节问题:
	a) . 一个点 和 .. 两个点的问题 (Windows 和 Linux)
		. 表示当前工作目录
		.. 表示当前工作目录的父目录
	b) 相对路径和绝对路径 [了解 概念 WEB开发详细说]
		我的办公室在你们隔壁1001A  
		但是告诉快递，外卖小哥是不行的
		相对路径
			
		绝对路径：

			
3. md make dir 
	创建文件夹
4. rd 文件名 remove dir 
	删除文件夹
	【要求】
		删除文件夹必须是空文件夹，不能删除非空文件夹
	【注意事项】
		删除文件夹不是把当前文件夹放入到回收站，是直接从硬盘上抹去数据
5. echo  (了解)
	echo 数据>文件名.文件拓展名(后缀名)
	[展示文件的拓展名]
	我的电脑 -> 菜单栏 -> 工具 -> 文件夹选项 -> 第二个标签页 
	-> 查看 -> 滚动菜单 "隐藏已知类型的文件拓展名" 反选
	
	文件拓展名:
		.exe .doc .jpg .avi .rmvb .mp3 .mp4 .txt .ppt 
		.bmp .gif .java .class .html .css .js .py .c .cpp
		.h .m .php 
		.dll
			第一源动力 自学能力 动手能力 
	
6. del delete 删除文件
	del 文件名.文件拓展名(后缀名)
	【注意】该删除是直接抹去数据，不可逆操作
7. cls clean screan 清理当前命令提示符屏幕显示
8. exit 用来装的  
9. * 通配符 
	【慎用】
10. 上下键 回顾之前的命令

Linux命令:
	ls cd mkdir rm cp mv chmod sudo tar touch vim lsattr
	yum apt-get
计算机的语言
1. 机器语言
	01010101010101
	计算机之父 冯・诺依曼 二进制思想 文件存储原理
	三个开关 0关 1开
	000 111 001 010 100 011 101 110
2. 汇编语言 
	IBM Inter AMD 
	sub add mov 助记符来编程
	贝尔实验室 <<太空漫步>>
	UNIX
3. 高级语言
	B-> C C++ Java PHP Python Perl Go JavaScript ………………
	编译性语言:	
		运行速度快，直接交给CPU执行
		C C++ Object-C PHP
	解释性语言:
		跨平台，效率略低，需要解释器解释之后，交给CPU执行
		Java C#
	Java 爪哇岛
	
	JavaSE 个人开发
	JavaEE 企业级WEB开发
	JavaME 手机端开发(不常用)
Java的起源
高斯林 / 高司令
聪明绝顶，地中海形象艺术家
SUN Stanford University NetWork 斯坦福大学网络公司
Java 做机顶盒
96年1月份 Java 1.0 推广方向是JavaWEB开发方向，网站开发
04年 推出了 JDK1.5 JDK1.8 
09年 甲骨文公司(Oracle)公司 收购SUN公司 42亿美金

Java最大的优势 跨平台!!!
	跨平台:一处编译，到处执行
	为什么能够跨平台:
		在不同的平台上，都有与之对应的JVM虚拟机
JDK安装
以后所有的开发工具，开发软件都要从官方渠道获取
JDK1.8.161官方网站
要求下载Windows版本的64安装包 
全部安装到D盘的
	注意事项：不能有中文路径
JDK路径:
	D:\Program Files\Java\jdk1.8.0_161\
JRE路径:
	D:\Program Files\Java\jre1.8.0_161\

JRE: Java Runtime Environment Java运行环境
	JRE = Java虚拟机(JVM) + 核心类库(辅助JVM运行的工具)
JDK: Java Development Kits Java 开发工具集
	JDK = JRE + Java开发工具
Java JDK目录结构
bin: binary 二进制 主要存放的是Java的开发工具 关注以下几个工具:
	javac.exe java.exe javadoc.exe javap.exe
db: Database 数据库 是JDK自带的一个小型数据库(基本没人用)Derby
include: 存放Java程序运行需要调用系统资源的接口文件(了解)
jre: Java Runtime Environment Java程序的运行环境
lib: Library 库 核心类库，支持Java程序运行的文件，主要是提供给JVM使用
src.zip: Java完整源代码 后期模仿学习的对象
Java 运行环境配置
打开我的电脑(Windows + E) -> 空白处 鼠标右键 选择属性 -> 左侧边栏【高级系统设置】 -> 【环境变量】

修改系统变量:
	新建:
		变量名: JAVA_HOME
		变量值: JDK安装路径 例如:D:\Program Files\Java\jdk1.8.0_161\
	新建：
		变量名: CLASS_PATH
		变量值: .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar
	找到系统变量的Path变量
	编辑：
		在末尾(键盘的End) 复制一下内容
		;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;



复习
计算机硬件
	CPU 内存
软件:
	操作系统
	应用程序: Android
操作计算机的方式：
	1. 图形化界面 2. 命令行(Linux)
	MS-DOS： dir cd  md rd del cls exit * 
		tab自动补齐
计算机语音:	
	1. 机器语言 010101
	2. 汇编语言 
	3. 高级语言 
JavaSE JavaEE
JDK 安装 操作



##Java第一行代码,常量,变量
准备第一行Java代码
Notepad++ 前期准备
1. 打开Notepad++ 图标是一个绿色的变色龙
2. Notepad++ 菜单栏【设置】 -> 首选项 -> 自动完成 -> 反选所有
3. 首选项 -> 新建 -> 格式 选择Windows -> 编码集 ANSI
4. 新建新的文本标签页 a) 双击文本标签页的空白处 b) Ctrl + N
5. 书写Java代码，要求Java文件的名字必须和class之后的名字是一致的，可以使用粘贴复制，保存的Java文件，【必须】用.java后缀名结尾
Java代码通用代码规范
1. 在代码中所有的成双成对的标点符号必须一起写, 例如: [] {} () "" ''
2. 在每一条语句之后，都要有分号 ; 结尾, 区分是不是一条语句，就看这行代码之后有么有大括号
3. 如果你的代码需要缩进，需要对齐，请使用tab键
编译Java代码
编译和运行Java程序需要的两个Java工具
	javac.exe 编译Java文件，生成与之对应的.class(字节码文件)，二进制文件
	java.exe 执行编译之后的得到的.class(字节码文件)
格式:
	javac FristJava.java ==> FirstJava.class
	java FristJava ==> 执行Java程序
初学者代码开发的问题
1. 迷路 操作的工具文件夹要是你目标文件夹，注意路径问题
2. 细节问题 中文符号 ;;； () （）
3. 拼写错误 main mian println 
4. 文件名和class之后的名字不统一
5. 下周三开始
数据在内存中的存储方式【了解】
存储数据的单位
在计算机中，最小的操作单位是 字节 byte
1byte = 8bit 一个字节对应8个二进制位
1024byte = 1kb
1024kb = 1mb
1024mb = 1gb
1024gb = 1tb
1024tb = 1pb
2014年  淘宝这十年 50PB
数据如何保存
常见进制
进制	基数范围	规则
十进制	0 ~ 9	逢10进1
二进制	0 ~ 1	逢2进1
八进制	0 ~ 7	逢8进1
十六进制	0 ~ 9 A ~ F	逢G进1
计算机支持的最大进制是36进制
	26个英文字母 + 10个数字 = 36进制
进制之间的转换 【了解】
	十进制 转为 二进制
	125(10) = 111 1101(2)
	125   1
	 62   0
	 31   1 
	 15   1
	  7   1
	  3   1
	  1   1
	  0
	二级制 转为 十进制
	111 1101(2) = 2^0 + 2^2 + 2^3 + 2^4 + 2^5 + 2^6
				= 1 + 4 + 8 + 16 + 32 + 64
				= 125(10)
我的开发人生突出一个字 "懒" 要学会用工具

	如何展示一个八进制数
	如果你还有点良心的话就用0开头表示8进制数
		0123 0777 0456 0899×
	八进制 和 二进制关系
	八进制的1位 对应 二进制的3位
	111 = 7 000 = 0
	
	任何展示一个十六进制数
	要求用0x或者用0X开头
	0xabcd 0XABCD 0xAB123
	十六进制的1位  对应  二进制4位
	1111 = 15  0000 = 0
原码 反码 补码 【掌握】
在计算机中，保存数据都是使用补码方式，这里演示我们使用整数来展示
正整数和负整数

正整数：
	三码合一 原码 反码 和 补码 是一样的
	就是该正整数的二进制表示方式 
	例如：
	118(10) = 0111 0110(2)
负整数:
	-118 
	原码: 该负数对应正整数的原码 最高位表示符号位 1表示负数，0表示正数
		-118(10) => 0111 0110(2) => 1111 0110(2)
	反码:	原码除【符号位】之外，其他位按位取反
		1111 0110(2) = 1000 1001(2)
	补码: 反码 + 1
		1000 1001(2) + 1 = 1000 1010(2)
	
	0111 0110(2)  118
+   1000 1010(2) -118
---------------------------
    0000 0000   0
    
负数在计算机中保存的形式是用补码形式
这样操作是为了简化计算机的运算逻辑复杂度，提供计算机的运行效率
常量【重点】
π 3.1415926 祖冲之
G 重力加速度 9.8
C 光速 一秒绕地球7.5圈 真空
黄金比例 0.618
文字 英文字 A B C D

常量不单单是常见的数字，字母，文字，当然也包含语句也是常量

开发中的常量：
	在程序运行的过程中，不会发生改变的量，就是常量
	整数: 10 20 30 100 -500
	小数: 3.1415926 0.618 9.8
	真假关系: T F true false 布尔类型 boolean 舶来品
	
	字符:
		'a' 'A' '1' '我' '$'
		[特征]
			【英文单引号】包含的【单个元素】,这个称之为【字符常量】
	字符串：
		"This is String"
		[特征]
			【英文双引号】包含的所有内容都是字符串常量
编码集问题：
	GB2312 中国简体文字和一部分少数名族的文字 我 1111 1001
	BIG5 中文繁体字的编码 我 1001 1111
	GBK Windows操作系统，默认的中文模式的编码集 新国标 包含所有的简体文字和少数民族文字
	UTF-8 万国码 开发中统一使用的编码集
		Java HTML MySQL Oracle
	ASCII 最简单的编码集
		128个
		0 ~ 31  不可见字符
		【要求】在使用ASCII码时，直接使用字符本身，不要使用对应的编码
		'A' 对应的ASCII 65
转义字符:
//   \\
Public protected default private


	\" \' 
	\n 回车 enter
	\t tab键，制表符
	\\ 展示一个反斜杠
	\\\\ 展示两个反斜杠
	'\n'  √   字符常量
	转义字符的注意事项：
		1. 转义字符有且只能转义\之后的第一个字符
		2. 转义字符是一个整体，可以看做是一个字符常量

【面试题】
	请问 '\040'  表示什么?
	在转义字符中出现数字，都是对应ASCII码表的八进制表示 \40 == 32(10) sp
	空格。这里面试如果遇到 \040 \40 是一样的
 
命名规范 标识符 【原则问题 规范】
以下内容参考 AJCG (阿里巴巴技术团队规范)
邮箱注册:
	126邮箱 注册邮箱名:
		6~18个字符，可使用字母、数字、下划线，需以字母开头

标识符的命名规范
	1.标识符只能使用数字 0 ~ 9 字母 A ~ Z a ~ z 以及唯一能够使用的标点符号
	下划线 _
	2. 要求标识符必须用字母开头
	3. 在标识符中，严格区分大小写!!! A a是两个完全不同的含义
	4. 标识符没有严格的长度限制，但是会根据业务的需求来确定使用的长度
	5. 标识符必须要做到 见名知意 动宾结构 【重点】
		img1 img2 img3 img4 img5 img6 
		imgTitle imgLogo imgBanner 增加辨识度
		a b c d e
		int a,b,c,d;
		ageOfStudent scoreOfStudent studentID
		tsgly 图书管理员 200RMB
		
		payTime
		payBeiZhu
		lp Wife
		fq Father
		mq Mather
		lg Husband
		yy
		yy1
	6. 要求使用驼峰命名法
		a) 小驼峰
			首字母小写，其他每一个单词的首字母大写
			ageOfStudent iPhone iMac iTouch iPod iPad
		b) 大驼峰
			所有单词的首字母都要大写
			要求class之后的名字要符合大驼峰命名法
			FirstJava Demo1
	7. 在Java语言中，已经被占用的关键字和保留关键字不能作为标识符
		在代码中变色的单词，不能用来当做标识符

保留关键字
ASCII码表
文档
变量 【重点】
天气 
16 ~ 31 
11 ~ 22 年龄 体重 时间 身高

方程 未知数
x + y = 15;
2x + y = 10;
x = -5 
y = 20
变量

在代码中的变量定义:
	在程序的运行过程中，可以发生改变的量，就是一个变量
	例如: 在二元一次方程中，x 和 y 都是未知数(变量)的名字，需要一个变量名，来保存或者说使用数据
变量就是容器

考虑数据类型:
	参考常量的数据类型， 整数，小数，真假关系，字符
	整型 浮点类型 布尔类型 字符型
八大基本数据类型
整型	占用内存空间大小	数据范围
byte	1字节(8bit)	0 ~255
short	2字节(16bit)	0 ~ 65535
int	4字节(32bit)	0 ~ 2^32 - 1
long	8字节(64bit)	0 ~ 2^64 - 1
浮点型	占用内存空间大小	数据范围
float(单精度浮点型)	4字节(32bit)	-3.4 * 10^38 ~ 3.4 * 10^38
double(双精度浮点类型)	8字节(64bit)	10^308
布尔类型	占用空间大小	数据范围
boolean	视情况而定(不考虑)	true false
字符类型	占用空间大小	数据范围
Char	2字节(16bit)	在GBK编码下可以保存中文
如何定义一个变量
数据类型 变量名 = 初始化的数据;

变量定义的注意事项：
	1) 在Java中，一个变量没有被赋值的情况下，不能使用!!!
	2) 计算机原则是保证数据的完整性，不考虑占用的数据空间是否浪费，在开发中常量小
	数会被认为是一个double类型数据。这里是用double类型的数据赋值给float类型，
	在Java中是不被允许的(数据类型一致化问题)。为了给float类型的变量赋值。要求
	格式如下：
		float floatNumber = 3.14F;
		F表示该小数是一个float类型的数据
	3) 如果给long类型变量赋值，为了保证数据类型一致化，通常会在数据之后加上大写L
	4) 在给字符变量赋值的时候，请使用字符本身，不要考虑ASCII的问题。这里可以使用
	字母，数字，标点符号，转义字符，汉字
	额外关注: '\0' ASCII 第一个字符 通常用来初始化字符类型变量
	5） = 赋值 赋值 赋值 赋值
Windows 常用快捷键
Windows + E
Windows + R
Ctrl + C/V/X/Z/S/Y



复习
常见进制有 十进制 二进制 八进制 十六进制
Byte KB MB GB TB PB 

Redis
原码 反码 补码

常量
	在程序运行的过程中，不会发生改变的量
	整型(整数) 浮点型(小数) 布尔类型 字符类型 
         
	编码集: GBK BIG5 UTF-8 
	ASCII 最简单的编码 使用字符请使用字符本身，不要编码
	
	转义字符 
		只能转义带有特定含义的字符

命名规范:
	1. 标识符能够使用 数字(0 ~ 9) 英文字母(A ~ Z a ~ z) 下划线 _
	2. 标识符要求用字母开头
	3. 标识符是严格区分大小写
	4. 标识符没有强制的长度限制，根据你自己实际开发需求来确定
	5. 标识符要求做到见名知意，动宾结构
	6. Java的关键字和保留关键字不能使用 
		int float main public void 
	7. 采用的命名方式，主要有两类
		小驼峰: 首字母小写，其他的每一个单子的首字母大写
		大驼峰: 所有的单词首字母都要大写
	8. 要求所有的标识符必须使用 英文 (有道)

变量：
	在程序的运行过程中，可以发生改变的量
	整型： byte short int long
	浮点型: float  double
	字符型: char
	布尔类型: boolean

	格式:
		数据类型 变量名 = 初始化的数据;
	1. 没有赋值的变量不能使用！！！
	2. 在给long类型的变量赋值时，请加上L。给float类型赋值时，需要加上F
	3. 给字符类型的变量赋值，请使用 字符本身'A' 如果需要初始化一个字符类型变量
	可以使用 '\0' 
	4. = 赋值 赋值



运算符 分支结构
算术运算符
+ - × ÷ ()
先乘除后加减
有括号先处理括号里面的内容
除数不能为0

在代码开发中，算术运算符是这样的:
	+ - * / %取余
	13 % 3 = 4 …… 1
在运算的过程中，只有被赋值的变量才会修改变量值，其他的都是在提供运算数据

优先级问题:
	所有的运算符中，()是最高优先级
	简单粗暴加括号

+=  -=  *=  /=  %= 
例如:
	num1 = num1 + num2;
	num1 += num2;
自增自减运算符
【要求】自增自减运算符是提供给【变量】使用的
++: 自增操作，操作的变量 += 1
	优先级:
++a  a++
		在变量之后，首先执行该行语句，再来执行自增
		在变量之前，首先执行自增，再去执行该行语句

--: 自减操作，操作的变量 -= 1
		在变量之后，首先执行该行语句，再来执行自减
		在变量之前，首先执行自减，再去执行改行语句

Swift 已经不支持自增自减。为了避免没有必要的歧义性 object-c
【个人建议】
	在使用自增自减运算符，单独成行，避免没有必要的歧义

面试题:
	int num = 5;
	++(num++) ???
		
		解释: 
			按照语法规范。首先执行小括号里面的num++。得到结果是num的值为6
			但是这里有小括号包含，所有整个小括号对外展示的效果是一个常量 6
			而自增自减运算符是【不能操作常量】。所以语法错误!!!
关系运算符
> < ≥ ≤ = ≠
数学中的关系运算符

开发中的关系运算符
> < >= <= == !=

关系运算符得到的结果是判断运算符两边的表达式结果是否符合运算符的要求
得到的结果是boolean  true  false

5 > 4 true
5 < 4 false
逻辑运算符
与: 金库  需要两个人同时在场，同时带着钥匙，才可以打开，缺一不可
	&& 同真为真，有假即假
或: 自己家门 不管谁带有钥匙都可以开门，但是如果都没带，就GG了
	|| 有真即真，同假为假
非: 取反 怼怼
	! 真变假来，假变真

【断路原则】
	面试题:
	 1. int num = 5;
		boolean ret = num > 4 && num++ > 5
		ret ? num ?
		解释:
			ret = false;  num = 6;
			num++ > 5 首先会执行判断然num和5比较，然后再来做自增
			num > 5 结果为false
            所以整个表达式为false
            
	2.  int num = 5;
		boolean ret = num > 5 && num++ > 4;
		ret ? num ?
		解释：
			ret = false; num = 5;
			在逻辑与运算符的左侧，已经确定当前整个逻辑与的表达式值为false
			在右侧的num++ > 4 就是无意义的，计算机不会再执行num++ > 4的
			判断。没有执行，所有num的值就不会改变。
	
	3.  int num = 5;
		boolean ret = num > 5 || num++ > 5;
		ret ? num?
		ret = false; num = 6;
	
	4.  int num = 5;
		boolean ret = num > 3 || ++num > 3;
        ret ? num ?
        ret = true; num = 5;

【拓展】
	在计算机中，默认的真假关系，从原理上来说，是 1(真) 和 0(假)
	在计算机中，非 0 即  真
	true 0000 0001
	false 0000 0000
	
	以下内容不适用Java，但是适用于 C/C++ OC PHP
	面试题：
		请用最直观的表示式，描述以下语句的含义
		前提:n是一个int类型的变量
		!n的含义
		n = 1;  !n => false
		n = 2;  !n => false
		n = 0;  !n => true;
		!n是用来判断当前变量n的值是否为0。用其他表达式展示
		n == 0
简单练习
1. 判断一个字符是不是数字字符
	123  '1' '12'错
	字符常量，是[单引号]包含的[单个元素]
	char ch;
	'0' <= ch <= '9'; ×
	ch >= '0' && ch <= '9'; perfect
2. 判断一个字符是不是英文字母
	ch2 >= 'A' && ch2 <= 'z'; ×
	(ch2 >= 'A' && ch2 <= 'Z') || (ch2 >= 'a' && ch2 <= 'z')
3. 判断一个年是不是闰年?
	能被4整除，但是不能被100整除，或者能被400整除
	(year % 4 == 0 && year % 100 != 0) || year % 400 == 0
分支结构
代码中的结构：
	顺序结构，分支结构，循环结构
if (/*判断语句 true/false*/) {
	//语句体 如果为true执行
}
/*
运行流程：
	当程序运行到if语句时，首先判断if之后小括号里面的表达式是否为true，如果为true
	执行语句体。如果为false，直接运行到大括号之外
*/

if (/*判断语句 true/false*/) {
	//true 语句体
} else {
	//false 语句体
}
/*
执行流程：
	当程序运行到if - else 语句时，首先判断if之后小括号里面的表达式是否为true，如果
	为true ，执行true 语句体，如果为false ，执行false 语句体。
	
	代码中最遥远的距离是我在if里，你在else里
*/
if (/*条件1*/) {//确定的值 范围
	//语句体1
} else if (/*条件2*/) {
	//语句体2
} else if (/*条件3*/) {
	//语句体3
} else {
	//其他处理情况
}
/*
运行流程:
	当程序运行到if - else if结构时，会匹配if之后的条件。找到匹配的条件之后，执行
	对应的语句体，如果没有匹配的条件。执行else里面的处理方式
	
学生成绩:

	90分以上  优  
	80分以上  良
	70分以上  中
	60分以上  及格
	60分以下  叫你爹过来~~

参数判断   异常值（值不合法）
*/
####Scanner 扫描器的使用： 从键盘上获取用户输入的数据。仅供目前使用，之后的JavaWEB开发，是从前端发送数据到后台 1. 导包 给当前程序提供技能点 在class 上面写上 import java.util.Scanner; 2. 创建Scanner扫描器"变量" Scanner sc = new Scanner(System.in); 3. 使用Scanner里面的nextInt()方法，从键盘上获取用户输入的int类型数据 int num = sc.nextInt(); 举一反三: nextFloat() nextLine();
1874107836   9点之前
####输入参数合法性判断: 程序的运行只会考虑Java的语法规则，而不会考虑生活逻辑。代码是提供给用户使用的。 那么我们的就要在符合Java语法规则的情况下，去满足实际的生活需求。 例如:学生的成绩不会高于100分，低于0分。 这里可以在用户输入数据之后，对用户输入的数据进行判断，这里使用if分支结构，对 用户输入的数据进行过滤。
这种操作称之为参数合法性判断
【可以增强代码的健壮性，稳定性】
让你的开发思维更为严谨
switch - case 结构
	switch (变量) {
		case 确定值1:
			//处理方式1;
			break;
		case 确定值2:
			//处理方式2;
			break;
		/*………此处省略1W行………*/
		default:
			//最终的处理方式
			break;
	}
/*
执行流程：
	当程序运行到switch - case结构的时候，直接利用switch之后的变量去匹配
	case之后的确定值。找到匹配项，指向对应的处理方式，如果没有任何的一个匹
	配。执行default之后的最终处理方式

【注意事项】
	1. 在switch - case 结构中，运行的代码只能是case 到 break之间，或者
	case 到 大括号之间!!!
	2. break可以省略，但是代码是继续执行到遇到break或者大括号结束。
	3. 在case之外的点是不能被执行的，编译时会有语法错误，如果在eclipse IDE
	工具下，提示的是 unreachable code
	4. 在switch - case中不能出现相同的case选项
	5. default从语法上是可以省略。不过，要根据实际需求来确定是否要省略default

*/



复习
算术运算符
关系运算符
逻辑运算符

分支结构
	if if - else if - else if
	switch - case
	case 1: System.out.println("123"); break;

Scanner sc = new Scanner(System.in);
sc.nextInt(); 91.3

if - else if 结构， else 是可以省略



##循环和函数
循环结构
顺序结构 分支结构 循环结构
实际问题:
	在代码中，可能存在大量重复功能代码。需要一遍一遍的书写。这样的代码会导致
	1. 代码臃肿
	2. 阅读性极差
	3. 维护性极差
while循环
while (/*循环条件 true/false*/) {
	//循环体
	//(循环条件变更)
}
/*
执行流程:
	当程序运行到while循环，首先判断循环条件，如果条件为true 执行循环体(循环条件变
	更)。进入下一次循环，直到while 之后的循环条件为false，循环终止!!!
【注意】
	在代码中出现死循环，Ctrl + C 终止程序运行
*/
do - while循环
do {
	//循环体
	//(循环条件变更)
} while (/* 循环条件 true/false */);;;;;;;;;;;;;
/*
执行流程；
	当程序运行到while循环时，不管3721直接运行一次循环体(循环条件变更)，然后再来
	判断while之后的循环条件十分为true， 如果为true执行，下一次循环，如果为false
	终止循环。
*/
while 和 do - while 的区别
while 和 do - while 之间的一个区别是
while循环的每一次执行都是在控制范围以内的，但是do -while循环第一次执行
是不经过任何的判断，就会执行的。
所以这里存在一定的隐患

程序猿/媛生存法则:
	【已知】 【可控】
【个人建议】
	能用while解决的问题，就不要用do - while
for循环
for (/*循环条件初始化*/; /*循环条件判断*/; /*循环条件变更*/) {
	//循环体
}
 
continue关键字
字面含义:继续 go on
在代码中的含义是: 结束当前次循环，直接进入下一次循环

【注意】
	1. 在while或者do - while中，如果使用continue关键字，要时刻注意continue
	关键字的位置，是否会影响到循环条件变更。如果影响到会导致死循环
	2. for循环中，可以肆无忌惮的使用continue

【建议】
	如果业务逻辑中，不得不使用continue关键字，请和for循环配合使用
break关键字
字面含义: 打破
代码中的含义是: 跳出 跳出switch case结构或者循环结构
循环练习
1. 请展示100以内的所有奇数。
2. 逢七过!!! 100以内!!!
3. 模拟点菜 利用循环和分支结构 存在的是循环次数不确定
4. *****
   *****
   *****
   *****
   *****
5.*
  **
  ***
  ****
  *****
6.    *
     ***
    *****
   *******
  *********
7.  *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
8.  A
   ABA
  ABCBA
 ABCDCBA
ABCDEDCBA
 ABCDCBA
  ABCBA
   ABA
    A
9. ###*###
   ##*#*##
   #*###*#
   *#####*
   #*###*#
   ##*#*##
   ###*###
函数
在代码中，有很多重复功能的代码块。需要重复利用，在不同的地方，重复使用！！！
如果大量的使用CV大法，会导致以下问题：
	1. 代码过于臃肿
	2. 阅读性极差
	3. 维护性极差

什么是函数啊?
	System.out.println();
	nextInt();
	把代码中的常用功能，【封装】成一个函数，作为工具，【重复】使用！！！

如何封装一个函数
	比葫芦画瓢
	public static void main(String[] args) {
		//函数体
	}
	public static: 修饰符 (不要问)
	void: 返回值类型 (void表示当前方法/函数是没有返回值)
	main: 函数名/方法名 (要符合标识符规范，动宾结构，见名知意，小驼峰命名法)
	(参数列表): 函数/方法 运行需要的外部数据
	
	格式:
	public static 返回值类型 函数名/方法名(运行所需参数类型) {
		//函数体
	}



复习
DOS命令
	cd dir md rd del exit * cls 

Linux
	cd ls mkdir mv rm cp chmod 755 sudo yum apt-get lsattr
	vim cat source 

JDK：
	JRE = JVM + 核心类库
	JDK = JRE + Java开发工具 (java.exe javac.exe javadoc.exe javap.exe)

目录:
	bin: 二进制文件，可以执行的文件
	lib: 核心类库
	src.zip: Java源代码压缩包
	include: 

配置环境变量:
macOS操作系统，环境变量配置
Linux操作系统，环境变量配置 (centOS Ubuntu)

Java语言开发规范:
	AJCG 
	驼峰命名法，见名知意，动宾结构。
	MySQL规范(58同城)
	注释规范
常量
	在代码中不可改变的量
	整数 小数 真假关系 字符 字符串
	字符:	单引号包含的单个元素
		转义字符: '\n'  '\40' \r \n 文件操作
		ASCII 使用字符请使用字符本身，不要使用对应的数值 
变量
	整型: byte short int long 
	浮点型: float double
	字符型: char
	布尔类型: boolean
	格式:
		数据类型 变量名 = 初始化的数据;
	= 赋值
	== =
运算符
	算术运算符: + - * / % ()
	关系运算符: > >= < <= != ==
	逻辑运算符: && || ！

分支结构
	if () {
      
	}
	
	if () {
      
	} else {
      
	}
	
	if () {
      
	} else if () {
      
	} else {
      
	}
	
    switch () {
       case 常量: //int String
        	语句体;
        	break;
       default:
       		最终处理方式;
       		break;
    }
循环:
	while
	do - while
	for 
	break continue;

函数:
	public static 返回值类型 函数名(形式参数列表) {
      	函数体;
	}



函数
函数运行细节问题
1. 函数功能单一化
2. 数据类型选择，请注意范围。例如：在么有特定要求的情况下，浮点类型最好使用double
3. 在开发中，尽量减少return的使用，增加代码的阅读性。
4. 代码学会分段 分行，让代码阅读性更高
5. 在代码中注意数据类型一致化问题
6. 操作字符转换，能用字符表示，就不要用其他数据
7. 目前从键盘上获取一个字符的方式:
	Scanner sc = new Scanner(System.in);
	char sc = sc.nextLine().charAt(0);
 
函数的理论知识
返回值
1.	表示该函数运行的结果，例如:加法运算，数据处理，查询操作，判断等等...
2.	表示当前函数的运行状态 (数组操作)
3.	返回值用的关键字是return。如果当前函数是一个void返回值，retrun之后不能有任何东西
参数列表
1.	可以为空。表示当前函数运行不需要任何的外来参数
2.	可以放入多个参数，要求用逗号隔开 例如: test(int num1, int num2);
3.	形式参数列表中要求的参数顺序，在传入参数时不能打乱 例如: test(int num1, double num2, float num3, char c); 正确方式: test(5, 3.14, 3.14F, 'A'); 错误方式: test('a', 4, 5.2F, 4.3);
函数的封装经验
1.	需求分析 这个函数要干嘛? 函数命名怎么写? 函数需要什么样子的参数? 返回值用什么类型? 返回值的含义是什么?
2.	思考函数流程 用【注释】直接把函数的运行流程，步骤写好，要求尽量细化
3.	按照流程写代码 按照注释，一步一步完成代码，不要给自己过多的压力。在完成当前步骤之前，不要考虑下一步
4.	测试 不要妄自菲薄，健壮性，安全性，稳定性。不要总想着好事情，也要想想错误情况。  



/*
1. 封装一个函数，返回两个整数里的较大那个
*/
public static int maxOfNumber(int num1, int num2) {
	if (num1 > num2) {
        return num1;
	} else {
        return num2;
	}
}
/*
2. 封装一个函数，返回两个浮点数里的较小那个
*/
public static double minOfNumber(double num1, double num2) {
    return num1 > num2 ? num2 : num1;
}
/*
3. 封装一个函数，来判断一个字符是否是大写字母
   如果是，返回true,否则返回false
*/
public static boolean isMyUpper(char c) {
  	boolean ret = false;
  	if (c >= 'A' && c <= 'Z') {
        ret = true;
    }
    return ret;
}
/*	 
4. 封装一个函数，来判断一个字符是否是数字字符
   如果是，返回true，否则返回false!
*/
public static boolean isMyNumber(char c) {
    boolean ret = false;
    if (c >= '0' && c <= '9') {
        ret = true;
    }
    return ret;
}
/*
5. 封装一个函数，来判断一个字符是否是英文字母
   如果是，返回true,否则返回false! 
*/
public static boolean isMyEnglish(char c) {
    boolean ret = false;
    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
        ret = true;
    }
    
    return ret;
}
/*
6. 封装一个函数，传入一个字符，如果是大写那么转化小写然后返回，否则保持不变返回
*/
public static char toMyLower(char c) {
    if (c >= 'A' && c <= 'Z') {
        c += ('a' - 'A'); //你们有什么问题???列出来遇到的问题
    }
    
    return c;
}
/*
7. 封装一个函数，实现将一个正整数，倒序打印输出!1234 4321 
*/
public static void reverse(int number) {
    while (number > 0) {
        System.out.print(number % 10);
        number /= 10;
    }
}
/*
8. 表达式（立方）	编写程序，计算该数的立方
*/
public static double cube(double number) {
    return number * number * number; //有没有百度其他方式?
}
/*
9. 流程控制（闰年问题）	输入一个年份，判断该年份是平年还是闰年：
  注: 闰年就是第二个月有29天的那一年, 能被4整除但是不能被100整除的是闰年, 或者能被400整除的也是闰年
  如果是返回 true  不是返回false
*/ 
public static boolean isLeap(int year) {
    boolean ret = false;
    if ((yaer % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
        ret = true;
    }
    return ret;
}



复习
函数是敲出来的！！！ 多敲多练多思考



数组
图书馆
《物理》 1977年 5本 会放到同一个书架上 T-110-01 ~ 05 人们生活中最基本的归纳总结思想： 1. 放到一起，在同一个书架上 2. 这类书会一个独立的编号 T-110 3. 每一本书又是一个独立的个体，利用末尾编号的不同来区分不同的个体 T-110-01 T-110-04
开发中遇到的问题
在代码开发中经常使用大量的相同数据类型的变量，如果按照定义变量的格式，在代码中会出现重 复很多次的语句，而且给这些变量起名也是一个很浩瀚的工程。 1. 代码中有很多冗余 2. 变量名都会非常类似，降低阅读性和维护性 3. 操作不方便，因为变量名非常类似
参考图书馆处理相同图书的方式: 1. 【数据类型一致的】变量放到一起，类似于同一种书籍放到同一个书架上 2. 给这些数据起一个统一的名字，类似同一种书会有一个统一的编号 T-110 3. 为了区分不同的个体，给他这些数据一个独立的编号 T-110-01 ~ T-110-05
如何定义一个数组
变量定义的格式: 数据类型 变量名 = 初始化数据;
定义数组的格式: public static void main(String[] args) 大宝天天见 数据类型[] 数组名 = new 数据类型[元素个数];
例如:
int[] arr = new int[10];
/*
赋值号左边:
	int: 数据类型，告诉你这个数组中保存的数据是什么类型。这里表示该数组中要保存的数据是int类型
	[]: 1. 告诉你这是一个数组类型数据 
		2. arr是一个数组名，而且是一个【引用】数据类型 【重点知识】
	arr: 数组名，操作数组使用的名字，是一个标识符，要求符合标识符的命名规范
赋值号右边:
	new: 关键字 "创建数组的关键字"
	int: 数据类型，表示当前数组中保存的数据是int类型
	[10]: 表示该数组【元素个数】为10，数组中可以保存10个int类型的数据。
		有些书籍: 数组的长度，数组的大小，数组的容量~~~
*/
如何使用数组
使用数组的格式: 数组名[有效下标];
在计算机世界里，基本上所有的东西都是从0开始的 例如: 元素个数/容量为10的数组，有效下标的范围是0 ~ 9 数组的下标是从0开始到数组的元素个数/容量 - 1 ###数组的内存分析
 
数组作为函数的参数
//例如:
//public static void main(String[] args)
import java.util.Scanner;

class Demo5 {
	public static void main(String[] args) {
		int[] array = new int[10];
		
		System.out.println("请输入10个整数:");
		//一个函数/方法，需要的参数是一个数组类型那么这里只要提供数组名就OK
		getNumbersFromKeyboard(array);
		
		printIntArray(array);
	}
	
	/**
	*从键盘上获取int类型数据保存到数组中
	*@param array 传入的用户保存数据的int类型数组
	*/
	public static void getNumbersFromKeyboard(int[] array) {
		//参数合法性判断
		if (null == array) {//传入的空间首地址为null
			System.out.println("传入参数不合法");
			return; //结束程序运行
		}
	
		Scanner sc = new Scanner(System.in);
		//利用for循环，从键盘上获取用户输入的数据
		for (int i = 0; i < array.length; i++) {
			array[i] = sc.nextInt();
		}
	}
	
	/**
	*展示int类型的数组到命令行
	*@param array 传入的要求展示的int类型数组
	*/
	public static void printIntArray(int[] array) {
		//参数合法性判断
		if (null == array) {
			System.out.println("传入参数不合法！");
			return; //结束函数运行
		}
		
		for (int i = 0; i < array.length; i++) {
			System.out.println("array[" + i + "] = " + array[i]);
		}
	}
}
地址 【重点!!!】
生活中的地址:
地址中的编号不可能在同一个路上重复
代码中的地址是什么? 内存的编号: 4GB = 1024 * 1024 * 1024 * 4 Byte 在计算机中操作的最小单元是字节 计算机已内存中的【字节】为单位，从0字节位置开始到内存的最大值，每一个字节有一个特定的编 号。这个编号就是【内存地址】
0 ~ 4294967295 十进制表示
在开发中，通过会使用十六进制来表示内存地址 0x0 ~ 0xFFFFFFFF 内存地址的范围
0x0: 是内存中编号为0的空间首地址，这个地址是收到系统保护的!!! 这个地址，任何的程序，都不能读取或者写入数据。如果发生读写操作，直接被系统干掉!!! null 这个就是0x0的关键字
null可以作为【引用数据类型】变量的初始值 int[] arr = null;
引用【重点!!!】
生活中你的引用通常是在文章来标注，当前内容是摘自那篇文章。这个引用可以用来跳转到这个文 章
代码开发中的引用:
一个变量保存的是另一个内存空间的地址，这个变量就称之为【引用】
数组中常见异常
ArrayIndexOutOfBoundsException: 数组操作下标越界 NullPointerException 空指针异常 操作null地址空间异常
数组的CRUD操作 和 排序 查询算法【重点】
CRUD: Read 查询: 1. int[] arr = {1, 2, 4, 5, 6, 7, 8, 9, 10}; 静态创建数组。请用代码告诉我元素3的下标是多少??? 2. 用户输入10个数保存到数组中(函数)， 利用函数找出数组中，最大值所在下标(唯一最大 值)以及最大值是什么? 3. 找出数组中的最大值，放到数组中下标为0的元素位置。 .
Update 修改
Create 增加
Delete 删除



地址 【重点】
航海中路60号
按照内存的最小单元 - 字节 4GB = 1024 * 1024 * 1024 * 4 = 4294967296字节 0 ~ 4294967295 内存的十进制编号范围 (hashCode)
为了方便计数和使用，通常地址是采用十六进制表示 0x0 ~0xFFFFFFFF

