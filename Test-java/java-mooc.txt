	Java的函数必须定义在类的内部，成为类的成员。定义一个函数，要想这样写：
<返回类型><方法名称>(<参数列表>){
	<方法体>
}
	返回类型是这个函数运行结束时要返回调用者的数据的类型，函数可以
返回基本数据类型，对象或者void，返回void表示这个函数不返回任何值。函数名称是一个Java名字，一样要遵循和变量一样的命名规则。参数表是0个或1个或多个参数定义，用逗号','分隔。
在这个阶段，我们要在所有的函数的返回值类型前面加上关键字"static"。static表示这个函数属于这个类，而不属于这个类的任何对象，因此我们才可以不制造这个类的对象，而直接从main()函数中调用它。
当一个函数被调用时，程序就转到这个函数中去运行，函数体里的语句就一条一条地被调用。一旦函数运行结束，就又回到调用它的地方去继续运行。

函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值
可以先想象成数学中的函数
y=f(x)

调用函数
函数名（参数值）
%%%%圆括号()起到了表示函数调用的重要作用
	即使没有参数也需要()
	如果有参数，则需要给出正确的数量和顺序
这些值会被按照顺序依次用来初始化函数中的参数

	没有返回值的函数
void函数名（参数表）
不能使用带值的return
可以没有return
调用的时候不能返回值的赋值
	public static void sum(int a, int b)
	{
		int i;
		int sum=0;
		for( i=a; i<=b; i++)
		{
			sum += i;
		}
		System.out.println(a+"到"+b+"的和是"+sum);
	}	
	类型不匹配
当函数期望的参数类型比调用函数是给的值的类型宽的时候，编译器能悄悄替你把类型转换好
.char --> int -->double
当函数期望的参数类型比调用函数时给的值的类型窄的时候，需要你写强制类型转换
.(int)5.0
当函数期望的参数类型与调用函数时给的值的类型之间无法转换的时候-->不行

Java语言在调用函数时，永远只能传值给函数，而不能将变量本身
	传值
	每个函数都有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系
	过去，对于函数参数表中的参数，叫做“形式参数”，调用函数时给的值叫做“实际参数”
		本地变量
函数的每次运行，就产生一个独立的变量空间，在这个空间中的变量，是函数的这次运行所独有的称作本地变量
.定义在函数内部的变量就是本地变量
.参数也是本地变量

变量的生存期和作用域
生存期：什么时候这个变量开始出现了，到什么时候它消亡了
作用域：在（代码的）什么范围内可以访问这个变量（这个变量可以起作用）
对于本地变量，这两个问题的答案是统一的：大括号内一块

本地变量的规则
本地变量是定义在块内的
它可以是定义在函数的块内
也可以定义在语句的块内
甚至可以随便拉一对大括号来定义变量
程序运行进入这个块之前，其中的变量不存在，离开这个块，其中的变量就消失了。
	块外面定义的变量在里面仍然有效
不能在一个块内定义同名的变量，也不能定义块外面定义过的变量
本地变量不会被默认初始化
参数在进入函数的时候被初始化了