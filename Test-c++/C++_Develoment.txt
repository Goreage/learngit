scanf(...)表达式的值
scanf(...)表达式的值为int,表示成功读入的变量个数

	int n,m;
	printf("%d",scanf("%d%d",&n,&m));
scanf(...)值为EOF（即-1）则说明输入数据已经结束
	int n,m;
	while(scanf("%d%d",&n,&m) != EOF){ //EOF是直接能拿来用的符号常量
	printf("%d",n+m);
}
	不停输入两个整数再敲回车，则不停输出它们的和。直到输入Window系统下，Ctrl+Z然后，程序结束
也可以：
	int n,m;
	while(scanf("%d%d",&n,&m) == 2){
		printf("%d",n+m);
	} 
cin表达式的值
cin>>m>>n...表达式的值，在成功读入所有变量时为true，否则为false
	int n,m;
	while(cin >> n >> m){
		printf("%d",n+m);
	}

用freopen重定向输入
调试程序时，每次运行程序都要输入测试数据，太麻烦了，
可以将测试数据存入文件，然后用freopen将输入由键盘重定向为文件
，则运行程序时不再需要输入数据
	注意；在c和c++中要一个/符号必须输入两个//符号
	freopen("c:\\tmp\\test.txt","r",stdin);
	//此后所有的输入都来自文件c:\tmp\test.txt

	数组
1.可以用来表达类型相同的元素的集合，集合的名字就是数组名
2.数组里的元素都有编号，元素的编号叫下标。通过数组名和下标，就能访问元素。
3.一位数组的定义方式如下：
	类型名 数组名[元素个数];
4.其中“元素个数”必须是常量或常量表达式，不能是变量，而且其值必须是正整数。元素个数也称作“数组的长度”。
int a[100];
	名字为a的数组，有100个元素，每个元素都是一个int型变量。
T a[N];		//T为类型名，如char, double, int等
		//N为正整数或值为正整数的常量表达式
1.数组a有N个元素，每个元素都是一个类型为T的变量。
2.N个元素在内存里是一个挨一个连续存放的。
3.a数组占用大小总共为N * sizeof(T)字节的存储空间
4.表达式“sizeof(a)”的值就是整个数组的体积，即N*sizeof(T)

数组
int a[100];
数组下标从0开始的，N个元素的数组，下标从0到N-1
数组名a代表数组的地址，假设为p， 则变量a[i]的地址就是p+i*sizeof(int)

用数组取代复杂分支结构
有时会用一个数组存放一些固定不变的值，以取代复杂的程序分支结构
如代替Monday的星期switch循环结构

数组越界
.数组元素的下标，可以是任何整数，可以是负数，也可以是大于数组的元素个数。不会导致编译错误：
	int a[100];
	a[-2] = 5;
	a[200] = 10;
用变量作为数组下标时，不小心会导致数组越界（变量下标值变为负数，或者太大）
.可能引起意外修改其他变量的值，导致程序运行结果不正确
.可能试图访问不该访问的内存区域，导致程序崩溃
.数组越界的程序，用某些编译器编译后可能可以正确运行，换一个编译器编译后就运行错误。

	二维数组
	m行n列的矩阵
	    X
	n行k列的矩阵
	     =
	m行k列的矩阵
定义N行M列的二维数组：
T a[N][M];	//T：类型名，如char,double,int等
		//M,N:正整数，或值为正整数的常量表达式
每个元素都是一个类型为T的变量
N*M个元素在内存里是一个挨一个连续存放的。
数组占用了一片连续的，大小总共为N*M*sizeof(T)字节的存储空间
表达式“sizeof(a)”的值就是整个数组的体积，即N*M*sizeof(T).
	访问数组元素的方法：
数组名[行下标][列下表]
列如：a[i][j]
行下标和列下标都从0开始
.数组T a[N][M]每一行都有M个元素

	函数
”函数“可以将实现了某一功能，并需要反复使用的代码包装起来形成一个功能模块
（即写成一个“函数”），那么当程序中需要使用该项功能时，只需要写一条语句，
调用实现该功能的“函数即可”。
.不同的程序员可以分别写不同的函数，拼起来形成一个大程序。

函数的定义
返回值类型 函数名（参数1类型 参数1名称， 参数2类型 参数2名称....）
{
		语句组（即“函数体”）
}
如果函数不需要返回值，则“返回值类型”可以写“void”

函数调用和return语句
调用函数：
		函数名（参数1，参数2,...）
		
对函数的调用，也是一个表达式。函数调用表达式的值，有函数内部的return语句
决定。return语句语法如下：
		return 返回值;
return语句的功能是结束函数的执行，并将“返回值”作为结果返回。“返回值”是常量，
变量或复杂的表达式均可。如果函数返回值类型为“void”,return语句就直接写：
	retrun;

return语句作为函数的出口，可以在函数中多次出现。多个return语句的“返回值”可以
不同。在哪个return语句结束函数的执行，函数的返回值就和哪个retrun语句里面的“返回值”相同
	函数调用语句导致程序进入函数执行，return语句导致程序回到调用语句的
后面继续执行
	一般来说函数的定义必须出现在函数调用语句之前，否则调用语句编译出错
	如果过函数A内部调用B，B,内部调用了A，哪个写前面
函数的声明
	函数的调用语句前面有函数声明即可，不一定要有定义！
	返回值类型 函数名（参数1类型 参数1名称， 参数2类型 参数2名称...）
例如：
	int Max(int a,int b);
	double Sqrt(double);
	double Distance(double,double,double,double,double);
	
参数名称可以省略。函数声明也称“函数的原型”

函数的声明
void FunctionB();	//声明
voide FUNCTIONa()	{
		.......
		FunctionB();
		...........
		retrun;
}
void FunctionB(){
		........
		FunctionA();
		..........
		return;
}
函数参数的传递
函数的形象是实参的一个拷贝，且形象的改变不会影响到实参（除非形参类型是引用或对象 --
 此部分内容本课不涉及）
 
 一位数组作为形参时的写法如下：
	类型名 数组名[]
不用写出数组的元素个数。例如：
	void PrintArray( int a[]) {}
	
数组作为函数参数时，是传引用的，即形参数组改变了，实参数组也会改变。
	二维数组作为形参时，必须写明数组有多少列，不用写明有多少行：
void PrintArray( int a[][5])
{
	cout << a[4][3];
}
必须要写明列数，编译器才能根据下标算出元素的地址。
	a[i][j]的地址：
数组首地址+i*N*sizeof(a[0][0])+j*sizeof(a[0][0])(N是数组列数)
形参数组的首地址就是实参数组的首地址

库函数和头文件
库函数：C/C++标准规定的，编译器自带的函数
头文件：C++编译器提供许多"头文件",如
	iostrram
	cmath
	string
头文件内部包含许多库函数声明以及其他信息，如cin,cout的定义
#include<iostream>
即可将头文件包含到程序中，此后即可使用头文件中定义的库函数以及其他信息

数学函数
数学库函数声明想在cmath中，主要有：
int abs(int x)		求整数x的绝对值
double cos(double x)求x（弧度）的余弦
double fabs(double x)求浮点数的绝对值
int ceil(double x)	求不小于x的最小整数
double sin(double x)求x（弧度）的正弦
double sqrt(double x)	求x的平方根

字符处理函数
这些函数在ctype中声明，主要有：
int isdigit(int c)	判断c是否是数字字符
int isalpha(int c)	判断c是否是一个字母
int isalnum(int c)	判断c是否是一个数字或字母
int islower(int c)	判断c是否是一个小写字母
int isupper(int c)	判断c是否是一个大写字母
int toupper(int c)	如果c是一个小写字母，则返回对应的大写字母
int tolower(int c)	如果c是一个大写字母，则返回对应小写字母

基本概念
位运算：
	用于对整数类型(int, char, long 等)变量中的某一位(bit),或者若干位进行操作。比如：
	（1）判断某一位是否为1
	（2）只改变其中某一位，而保持其他位不变
	C/C++语言提供了六种位运算符来进行位运算操作：
		@		按位与（双目）
		|		按位或（双目）
		^		按位异或（双目）
		~		按位非（取反）（单目）
		<<		左移（双目）
		>>		右移（双目）
左移运算符“<<”
	实际上，左移1位，就等于是乘以2， 左移n位，就等于是乘以2^n.而左移操作比
	而左移操作此比操作比乘法操作快得多。
	
	右移运算符">>"
	表达式：
		a >> b
	的值是：将a各二进位全部右移b为后得到的值。右移时，移出最右边的位就被丢弃。a
的值不因运算而改变。
		对于有符号数，如long, int, short, char类型变量，在右移时，符号位（即最高位）
将一起移动，并且大多数C/C++编译器规定。如果原符号位为1，则右移时高位就补充1，原符号位为0
则右移时高位就补充0.
	右移运算符号“>>”
	实际上，右移n位，就相当于左操作数除以2^n,并且将结果往小里取整。
	-25 >> 4 = -2
	-2 >> 4 = -1
	18 >> 4 = 1

C++中的字符串
字符串有三种形式
1.用双引号括起来的字符串常量，如“CHINA”,"C++ program".
2.存放于字符数组中，以‘\0’字符（ASCII码为0）结尾
3.string对象，string是C++标准模板库里的一个类，专门用于处理字符串（略）

字符串常量占据内存的字节数等于字符串中字符串数目加1，多出来的是结尾字符'\0'.
字符串"C program"在内存中的布局：
C program\0
字符串的长度不包含'\0'
	""也是合法的字符串常量，称为"空串"，空串仍然会占据一个字节的存储空间，存放'\0'
	而'\'字符在字符串中出现时。须连写两次，变成'\\'。例如：
		cout << "He said: \"I am a stu\\dent."";
	=>>He said: "I am a student."

字符串程序实例
	title [0] = 't';
	title [3] = 0;	//等效于 title [3] = '\0';
	cout << title << endl;
	return 0;
}
用scanf可以读入字符串
用scanf可以将字符串读入字符数组
scanf会自动添加结尾的'\0'
scanf读入到空格为止 cin读到'\0'为止

char line[100];
scanf("%s",line);	//注意不是$line 因为读的不是变量
printf("%s",line);

读入一行到字符串数组
cin.getLine(char buf[], int bufSize);
读入一行（行长度不超过bufSize-1）或bufSize-1个字符到buf，自动添加'\0'
回车换行符不会写入buf，但是会从输入流中去掉
buf[] 存放数组的字节 bufSize防止数组越界

char line[10];
cin.getLine(line ,bufSize(line));
//或 cin.getLine(line ,bufSize(10));读入最多9个字符到line
cout << line;
A b c /n回车不会读入 
A b c

A b c1234567\n回车不会读入
A b c1234

gets(char buf[]);
读入一行，自动添加'\0'
回车换行符不会写入buf,但是会从输入流中去掉。可能导致数组越界！
	char s[10];
	while( gets(s) ){
		printf("%s\n",s);
	}

字符串库函数
	使用字符串函数需要#include<cstring>
	字符串函数都会根据'\0'来判断字符串结尾
	形参为char[] 类型，则实参可以是char数组或字符串常量
字符串拷贝
	strcpy(char [] dest, char [] src);//拷贝src到dest
字符串比较大小
	int strcmp(char [] s1, char [] s2);//返回0则相等
求字符串长度
	int strlen(char [] s);
字符串拼接
	strcat(char [] s1, char [] s2);	//s2拼接到s1后面
字符串转成大写
	strupr(char []);
字符串转成小写
	strlwr(char []);

strlen常见糟糕用法
char s[100]="tsst";
	for(int i=0; i<strlen(s); ++i){
	s[i] = s{i}+1;	//此句不重要，只是为了说明要访问s[i]
	}
strlen函数的执行是需要时间的，且时间和字符串的长度成正比
每次循环，都要调用strlen函数，这是效率上的很大的浪费

指针的基本概念\
	每个变量都被存放在从某个内存地址（以字节为单位）开始的若干个字节中
	"指针"，也称作“指针变量”，大小为4个字节（或8个字节）的变量，其内容代表一个内存地址。
	通过指针，能够对该指针指向的内存区域进行读写
	如果把内存的每个字节都想象成宾馆的一个房间，那么内存地址相当于就是房间号
而指针里存放的，就是房间号。
	类型名 * 指针变量名
int *p;		//p是一个指针，变量p的类型是int *
char * pc;	//pc是一个指针，变量pc的类型是char * 
float *pf;	//pf是一个指针，变量pf的类型是float * 

	指针的内容
	int *p = (int * ) 40000;
p内容：
	十进制				40000
	十六进制			0X9C40
	二进制每个比特		0000 0000 0000 0000 1001 1100 0100 0000
p指向地址40000，地址p就是地址40000
*p就代表地址40000开始处的若干个字节的内容

通过指针访问其指向的内存空间
int * p = (int *) 40000;
//往地址40000处起始的若干个字节的内存空间里写入5000
*p = 5000;
//将地址40000处起始的若干字节的内容赋值给n
	int n = *p; 
	"若干" = sizeof(int), 也就是4个字节。因为int *p;
T * P;		//T可以是任何类型的名字，比如int,double
p		的类型：	T*
*pc		的类型：	T
通过表达式 *p, 可以读写从地址p开始sizeof(T)个字节
*p  等价于存放在地址p处的一个T类型的变量
*	间接引用运算符
sizeof(T*)		4字节（64位计算机上可能8字节）

指针用法
char ch1 = 'A';
char * pc = &ch1;	//使得pc指向变量ch1
& : 取地址运算符
&x : 变量x的地址（即指向x的指针）
	对于类型为T的变量x, &x 表示变量x的地址（即指向x的指针）&x 的类型是 T*.
指针用法
	char ch1 = 'A';
	char *pc = &ch1;	//使得pc指向变量ch1
	*pc = 'B';			//使得ch1 = 'B'
	char ch2 = * pc;	//使得ch2 = ch1
	pc = &ch2;			//使得pc指向变量ch2
	*pc = 'D';			//使得ch2 = 'D', 将D加在ch2上
	
指针的作用
		有了指针，就有了自由访问内存空间的手段
	不需要通过变量，就能对内存直接进行操作。通过指针，程序能访问的内存区域
就不仅限于变量所占据的数据区域
	在C++中，用指针p指向a的地址，然后对p进行加减操作，p就能指向a后面或前面的
内存区域，通过p也就能访问这些内存区域

指针的互相赋值
	不同类型的指针，如果不经过强制类型转换，不能直接相互赋值
int * pn, char * pc, char  c = 0x65;
pn - pc;		//类型不匹配，编译出错
pb = & c;		//类型不匹配，编译出错
pn = (int * ) & c;	//强制类型转化
int n = * pn;		//n值不确定
*pn = 0x123456789;		//编译能过，运行出错。

指针的运算
1)两个同类型的指针变量，可以比较大小
	地址p1 < 地址 p2, 	p1 < p2		值为真
	地址p1 = 地址p2, 	p1 == p2	值为真
	地址p1 > 地址p2, 	p1 > p2 	值为真
2）两个同类型的指针变量，可以相减
	两个T * 类型的指针 p1 和 p2
	p1 - p2 = (地址p1 - 地址p2) / sizeof(T)	//它们的绝对值表示可以存放多少个T类型变量
	
3）指针变量加减一个整数的结果是指针
P : T*类型的指针
n : 整数类型的变量或常量

p + n : T * 类型的指针， 指向地址:
	地址p +n * sizeof(T)
	
	n+p, p-n, *(p+n), *(p-n) 含义自明
	
4）指针的变量可以自增，自减
	T*类型的指针p指向地址n
	
	p++， ++p : p 指向 n + sizeof(T)
	p--,  --p : p指向 n -sizeof(T)
	
5）指针可以用下标运算符"[]"进行运算
p是一个T*类型的指针
n是整数类型的变量或常量

p[n]  等价于 *(p+n)

通过指针实现自由内存访问
如何访问int型变量a 前面的那一个字节?
	int a;
	char * p = (char * ) &a;	//&a是 int *类型
		--p;
	printf("%c",*p); 		//可能导致运行错误
	* p = 'A';				//可能大致运行错误
	
空指针
	地址0不能访问。 指向地址0的指针就是空指针
可以用"NULL"关键字对任何类型的指针进行赋值.NULL实际上就是整数0，值为NULL实际上
就是整数0，值为NULL的指针就是空指针：
	int * pn = NULL; char * pc = NULL; int * p2 = 0;
指针可以作为条件表达式使用。如果指针的值为NULL,则相当于为假，值不为NULL,
就相当于为真
	if(p)  if(p != NULL)		if(!p)  if( p == NULL )

指针和数组
数组的名字是一个指针常量指向数组的起始地址
	T a[N];
a的类型是 T *
可以用a给一个T*类型的指针赋值
a是编译时其值就确定了的常量，不能够对a进行赋值

作为函数参数时， T *P 和 T p[]等价
	void Fund( int * p)	{ cout << sizeof(p);}
	
	void Func(int p[] ){ cout << sizeof(p); } 
	
	指针和二维数组：
		T a[M][N];
	a[i]（i是整数）是一个一维数组
	a[i]的类型是T
	sizeof(a[i]) = sizeof(T) * N
	a[i]指向的地址：数组a的起始地址 + i*N*sizeof(T)
	
	void Reverse(int *p, int size){	//颠倒一个数组	*p === p[]
			for(int i=0; i<size/2; ++i){
					int tmp = p[i];
						p[i] = p[size-1-i];
						p[size-1-i] = tmp;
			}		
	}
	int a[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
	
	Reverse(a[1],4);
	=>{{1,2,3,4},{8,7,6,5},{9,10,11,12}};
	Reverse(a[1],6);
	=>{{1,2,3,4},{10,9,5,6},{7,8,11,12}};
	
	指向指针的指针
	定义：
	T ** P;
	p是指向指针的指针，p指向的地方应该存放着一个类型为T*的指针
	*p的类型是T*
	
	指针和字符串
	字符串常量的类型就是 char *
	字符数组组名的类型也是 char*
	
	字符数组名的类型也是char *,就是一个地址
		char name[20];
		int n;
		
		scanf("%d%s",&n,name);
		
		cin >> n >> name;
		
		字符串操作库函数
		char *strchr(const char *str , int c);
		寻找字符c在字符串str中第一次出现的位置。如果找到，就返回指向该位置的
		cahr*指针；如果str中不包含字符c，则返回NULL
		char *strstr(const char*str, const char*subStr);
		寻找子串subStr在str中第一次出现的位置。如果找到，就返回指向该位置的指针；
		如果str不包含字符串subStr,则返回NULL
		int stricmp(const char *s1,const char *s2);
		大小写无关的字符串比较。如果s1小于s2则返回负数：如果s1等于s2，返回0；s1大于s2，
		返回正数。不同编译器编译出来的程序，执行stricmp结果就可能不同。
		int strncmp(const char*s1, const char *s2, int n);
		比较s1前n个字符组成的子串的大小。若长度不是n，则取整个串作为子串。返回值和strcmp类似
		char *strncpy(char *dest, const char * src, int n);
		拷贝src的前n个字符到dest。如果src长度大于或等于n,该函数不会自动往dest中写
		入‘、0’；若src长度不足n,则拷贝src的全部内容以及结尾的'\0'到dest
		char *strtok(char *str,const char * delim);
		连续调用该函数若干次，可以做到：从str中逐个抽取出被字符串delim中的字符分隔开
		的若干个子串。
		int atoi(char *s);
			将字符串x里的内容装换成一个整型数返回，比如，如果字符串s的内容是“1234”，
		那么函数返回值就是1234.如果s格式不是一个整数，比如是"a12",那么返回0.
		double atof(char *s);
			将字符串s中的内容转换实数返回。比如，“12.34”就会转换成12.34.如果s的格式
		不是实数，则返回0.
		char *itoa(int value, char *string , int radix);
		将整型值value以radix进制表示法写入string:
			
			char szValue[20];
			itoa(27,szValue,10);	//使得szValue的内容变为"27"
			itoa(27,szValue,16);	//使得szValue的内容变为"1b"
		void指针：
				void *p;
		可以用任何类型的指针对void指针进行赋值或初始化：
		double d = 1.54;
		void * p = & d;
		void * p pl;
		pl = &d;
		因sizeof(void)没有定义，所以对于void*类型的指针p,
		*p 无定义
		
		内存操作库函数memset
		
		头文件cstring中声明：
		void * memset(void * dest,int ch, int n);
		将从dest开始的n个字节，都设置成ch。返回值是dest. ch只有最低的字节其作用。
		例：将szName的前10个字符，都设置成'a':
		char szName[200] = "";
		memset( szName, 'a',10);
		cout << szName << endl;
		=>> aaaaaaaaaa
		
		用memset函数将数组内容全部设置成0:
		int a[100];
		memset(a,0,sizeof(a));
		则数组a的每个元素都变成0
		
		内存操作库函数memcpy
		头文件cstring中声明：
		void * memcpy(void * dest, void * src, int n);
		将地址src开始的n个字节，拷贝到地址dest。 返回值dest。
		
		将数组a1的内容拷贝到数组a2中去，结果是a2[0] = a1[0], a2[1] = a1[1]....a2[9];
		
		int a1[10];
		int a2[10];
		memcpy(a2, a1, 10*sizeof(int));
		
		如何编写内存操作库函数memcpy
		void * MyMemcpy( void * dest, const void * src, int n){
			char * pDest = (char * )dest;	//使用强制类型转换将void类型的指针
			char * pSrc = (char * )src;		//转换为char类型的指针
			for (int i=0; i<n; ++i){
			//逐个字节拷贝源块的内容到目的块
					*(pDest + i) = *( pSrc +i ); 
			}
			return dest;
		}
		在源区域和目标区域如果有重叠，这个memcpy就不正确。
		
		函数指针
			基本概念程序运行期间，每个函数都会占用一段连续的内存空间。而函数名
		就是该函数所占内存区域的起始地址（也称“入口地址”）。我们可以将函数的入口地址赋给
		一个指针变量，使该指针变量指向该函数。然后通过指针变量就可以调用这个函数。这种指
		向函数指针变量称为“函数指针”。

		定义形式
		类型名（*指针变量名）(参数类型1，参数类型2...);
		例如：
		int (*pf)(int char);
		
		表示pf是一个函数指针，它所指向的函数，返回值类型应是int,该函数应有两个参数，第一个是
		int类型，第二个是char类型。
		
		使用方法
		可以用一个原型匹配的函数的名字给一个函数指针赋值。
		要通过函数指针调用它所指向的函数，写法为：
			函数指针名（实参表）;
			
		函数指针和qsort库函数
		C语言快速排序库函数：
		void qsort(void *base,int nelem, unsing int width,
		int (*pfCompare)(const void*, const void*));
		可以对任意类型的数组进行排序
		
		对数组排序，需要知道
		1）数组起始地址
		2）数组元素的个数
		3）每个元素的大小（由此可以算出每个元素的地址）
		4）元素谁在前谁在后的规则
		pfCompare:函数指针，它指向一个“比较函数”。该比较函数应为以下形式：
		int 函数名（const void*eleml, const void * elem2）;
		比较函数编写规则：
		1）如果* elem1应该排在 *elem2前面，则函数返回值是负整数
		2）如果*eleml和*elem2哪个排在前面都行，那行函数返回0
		3）如果 *elem1应该排在*elem2后面，则函数返回值是正整数
		比较函数是程序员自己编写的
		
		函数指针和qsort库函数
		排序就是一个不断比较并交换位置的过程。
		qsort函数在执行期间，会通过pfCompare指针调用“比较函数”，调用时将要比较的两个元素
		的地址传给“比较函数”，然后根据“比较函数”返回值判断两个元素哪个更应该排在前面。
		
		结构（Struct）
		在现实问题中，常常需要用不同类型的数据描述一个事物。比如一个工人的姓名，性别，年龄，工资，电话...
		如果编程时要用多个不同类型来描述一个事物，就很麻烦。当然希望只用一个变量就能代表一个”学生“
		这样的事物。
		
		c++只允许程序员自己定义新的数据类型。因此针对“学生”这种事物，可以定义一种新名为Student的数据类型
		的变量就能描述一个学生的全部信息。同理，还可以定义数据类型。Worker以表示工人。
		
		用“struct”关键字来定义一个“结构”,也就定义一个新的数据类型：
		struct 结构名
		{
				类型名 成员变量名；
				类型名 成员变量名；
				类型名 成员变量名；
				......
		};
		Struct Student{
				unsigned ID;
				char szName[20];
				float fGPA;
		};
		Student即成为自定义类型的名字，可以用来定义变量
		student s1,s2;
		例连个同类型的结构变量，可以互相赋值。但是结构变量之间用“==”，
		“！=”， “<”, ">", ">="进行比较运算。
		一般来说，一个结构变量所占的内存空间的大小，就是结构中所有成员变量大小之和。结构变量中的
		各个成员变量在内存中一般是连续存放的。
		4字节			20字节				4字节		
			ID 			sxName				fGPA
			
		一个结构的成员变量可以是任何类型的，包括可以是一个结构类型
		struct Date{
			int year;
			int month;
			int day;
		};
		struct StudentEx{
			unsigned ID;
			char sxName[20];
			float fGPA;
			Date birthday;			
		};
		结构的成员变量可以是指向本结构类型的变量指针
		struct Employee{
			string name;
			int age;
			int salary;
			Employee *next;
		}
		访问结构变量的成员变量
		一个结构变量的成员变量，可以完全和一个普通变量一样来使用，也可以取得其地址。
		使用形式：
			结构变量名。成员变量名
			
			StudentEx stu;
			cin >> stu.fGPA;
			stu.ID = 12345;
			strcpy(stu.sxName, "Tom");
			cout << stu.fGPA;
			