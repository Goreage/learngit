scanf(...)表达式的值
scanf(...)表达式的值为int,表示成功读入的变量个数

	int n,m;
	printf("%d",scanf("%d%d",&n,&m));
scanf(...)值为EOF（即-1）则说明输入数据已经结束
	int n,m;
	while(scanf("%d%d",&n,&m) != EOF){ //EOF是直接能拿来用的符号常量
	printf("%d",n+m);
}
	不停输入两个整数再敲回车，则不停输出它们的和。直到输入Window系统下，Ctrl+Z然后，程序结束
也可以：
	int n,m;
	while(scanf("%d%d",&n,&m) == 2){
		printf("%d",n+m);
	} 
cin表达式的值
cin>>m>>n...表达式的值，在成功读入所有变量时为true，否则为false
	int n,m;
	while(cin >> n >> m){
		printf("%d",n+m);
	}

用freopen重定向输入
调试程序时，每次运行程序都要输入测试数据，太麻烦了，
可以将测试数据存入文件，然后用freopen将输入由键盘重定向为文件
，则运行程序时不再需要输入数据
	注意；在c和c++中要一个/符号必须输入两个//符号
	freopen("c:\\tmp\\test.txt","r",stdin);
	//此后所有的输入都来自文件c:\tmp\test.txt

	数组
1.可以用来表达类型相同的元素的集合，集合的名字就是数组名
2.数组里的元素都有编号，元素的编号叫下标。通过数组名和下标，就能访问元素。
3.一位数组的定义方式如下：
	类型名 数组名[元素个数];
4.其中“元素个数”必须是常量或常量表达式，不能是变量，而且其值必须是正整数。元素个数也称作“数组的长度”。
int a[100];
	名字为a的数组，有100个元素，每个元素都是一个int型变量。
T a[N];		//T为类型名，如char, double, int等
		//N为正整数或值为正整数的常量表达式
1.数组a有N个元素，每个元素都是一个类型为T的变量。
2.N个元素在内存里是一个挨一个连续存放的。
3.a数组占用大小总共为N * sizeof(T)字节的存储空间
4.表达式“sizeof(a)”的值就是整个数组的体积，即N*sizeof(T)

数组
int a[100];
数组下标从0开始的，N个元素的数组，下标从0到N-1
数组名a代表数组的地址，假设为p， 则变量a[i]的地址就是p+i*sizeof(int)

用数组取代复杂分支结构
有时会用一个数组存放一些固定不变的值，以取代复杂的程序分支结构
如代替Monday的星期switch循环结构

数组越界
.数组元素的下标，可以是任何整数，可以是负数，也可以是大于数组的元素个数。不会导致编译错误：
	int a[100];
	a[-2] = 5;
	a[200] = 10;
用变量作为数组下标时，不小心会导致数组越界（变量下标值变为负数，或者太大）
.可能引起意外修改其他变量的值，导致程序运行结果不正确
.可能试图访问不该访问的内存区域，导致程序崩溃
.数组越界的程序，用某些编译器编译后可能可以正确运行，换一个编译器编译后就运行错误。

	二维数组
	m行n列的矩阵
	    X
	n行k列的矩阵
	     =
	m行k列的矩阵
定义N行M列的二维数组：
T a[N][M];	//T：类型名，如char,double,int等
		//M,N:正整数，或值为正整数的常量表达式
每个元素都是一个类型为T的变量
N*M个元素在内存里是一个挨一个连续存放的。
数组占用了一片连续的，大小总共为N*M*sizeof(T)字节的存储空间
表达式“sizeof(a)”的值就是整个数组的体积，即N*M*sizeof(T).
	访问数组元素的方法：
数组名[行下标][列下表]
列如：a[i][j]
行下标和列下标都从0开始
.数组T a[N][M]每一行都有M个元素

	函数
”函数“可以将实现了某一功能，并需要反复使用的代码包装起来形成一个功能模块
（即写成一个“函数”），那么当程序中需要使用该项功能时，只需要写一条语句，
调用实现该功能的“函数即可”。
.不同的程序员可以分别写不同的函数，拼起来形成一个大程序。

函数的定义
返回值类型 函数名（参数1类型 参数1名称， 参数2类型 参数2名称....）
{
		语句组（即“函数体”）
}
如果函数不需要返回值，则“返回值类型”可以写“void”

函数调用和return语句
调用函数：
		函数名（参数1，参数2,...）
		
对函数的调用，也是一个表达式。函数调用表达式的值，有函数内部的return语句
决定。return语句语法如下：
		return 返回值;
return语句的功能是结束函数的执行，并将“返回值”作为结果返回。“返回值”是常量，
变量或复杂的表达式均可。如果函数返回值类型为“void”,return语句就直接写：
	retrun;

return语句作为函数的出口，可以在函数中多次出现。多个return语句的“返回值”可以
不同。在哪个return语句结束函数的执行，函数的返回值就和哪个retrun语句里面的“返回值”相同
	函数调用语句导致程序进入函数执行，return语句导致程序回到调用语句的
后面继续执行
	一般来说函数的定义必须出现在函数调用语句之前，否则调用语句编译出错
	如果过函数A内部调用B，B,内部调用了A，哪个写前面
函数的声明
	函数的调用语句前面有函数声明即可，不一定要有定义！
	返回值类型 函数名（参数1类型 参数1名称， 参数2类型 参数2名称...）
例如：
	int Max(int a,int b);
	double Sqrt(double);
	double Distance(double,double,double,double,double);
	
参数名称可以省略。函数声明也称“函数的原型”

函数的声明
void FunctionB();	//声明
voide FUNCTIONa()	{
		.......
		FunctionB();
		...........
		retrun;
}
void FunctionB(){
		........
		FunctionA();
		..........
		return;
}
函数参数的传递
函数的形象是实参的一个拷贝，且形象的改变不会影响到实参（除非形参类型是引用或对象 --
 此部分内容本课不涉及）
 
 一位数组作为形参时的写法如下：
	类型名 数组名[]
不用写出数组的元素个数。例如：
	void PrintArray( int a[]) {}
	
数组作为函数参数时，是传引用的，即形参数组改变了，实参数组也会改变。
	二维数组作为形参时，必须写明数组有多少列，不用写明有多少行：
void PrintArray( int a[][5])
{
	cout << a[4][3];
}
必须要写明列数，编译器才能根据下标算出元素的地址。
	a[i][j]的地址：
数组首地址+i*N*sizeof(a[0][0])+j*sizeof(a[0][0])(N是数组列数)
形参数组的首地址就是实参数组的首地址

库函数和头文件
库函数：C/C++标准规定的，编译器自带的函数
头文件：C++编译器提供许多"头文件",如
	iostrram
	cmath
	string
头文件内部包含许多库函数声明以及其他信息，如cin,cout的定义
#include<iostream>
即可将头文件包含到程序中，此后即可使用头文件中定义的库函数以及其他信息

数学函数
数学库函数声明想在cmath中，主要有：
int abs(int x)		求整数x的绝对值
double cos(double x)求x（弧度）的余弦
double fabs(double x)求浮点数的绝对值
int ceil(double x)	求不小于x的最小整数
double sin(double x)求x（弧度）的正弦
double sqrt(double x)	求x的平方根

字符处理函数
这些函数在ctype中声明，主要有：
int isdigit(int c)	判断c是否是数字字符
int isalpha(int c)	判断c是否是一个字母
int isalnum(int c)	判断c是否是一个数字或字母
int islower(int c)	判断c是否是一个小写字母
int isupper(int c)	判断c是否是一个大写字母
int toupper(int c)	如果c是一个小写字母，则返回对应的大写字母
int tolower(int c)	如果c是一个大写字母，则返回对应小写字母

基本概念
位运算：
	用于对整数类型(int, char, long 等)变量中的某一位(bit),或者若干位进行操作。比如：
	（1）判断某一位是否为1
	（2）只改变其中某一位，而保持其他位不变
	C/C++语言提供了六种位运算符来进行位运算操作：
		@		按位与（双目）
		|		按位或（双目）
		^		按位异或（双目）
		~		按位非（取反）（单目）
		<<		左移（双目）
		>>		右移（双目）
左移运算符“<<”
	实际上，左移1位，就等于是乘以2， 左移n位，就等于是乘以2^n.而左移操作比
	而左移操作此比操作比乘法操作快得多。
	
	右移运算符">>"
	表达式：
		a >> b
	的值是：将a各二进位全部右移b为后得到的值。右移时，移出最右边的位就被丢弃。a
的值不因运算而改变。
		对于有符号数，如long, int, short, char类型变量，在右移时，符号位（即最高位）
将一起移动，并且大多数C/C++编译器规定。如果原符号位为1，则右移时高位就补充1，原符号位为0
则右移时高位就补充0.
	右移运算符号“>>”
	实际上，右移n位，就相当于左操作数除以2^n,并且将结果往小里取整。
	-25 >> 4 = -2
	-2 >> 4 = -1
	18 >> 4 = 1

C++中的字符串
字符串有三种形式
1.用双引号括起来的字符串常量，如“CHINA”,"C++ program".
2.存放于字符数组中，以‘\0’字符（ASCII码为0）结尾
3.string对象，string是C++标准模板库里的一个类，专门用于处理字符串（略）

字符串常量占据内存的字节数等于字符串中字符串数目加1，多出来的是结尾字符'\0'.
字符串"C program"在内存中的布局：
C program\0
字符串的长度不包含'\0'
	""也是合法的字符串常量，称为"空串"，空串仍然会占据一个字节的存储空间，存放'\0'
	而'\'字符在字符串中出现时。须连写两次，变成'\\'。例如：
		cout << "He said: \"I am a stu\\dent."";
	=>>He said: "I am a student."

字符串程序实例
	title [0] = 't';
	title [3] = 0;	//等效于 title [3] = '\0';
	cout << title << endl;
	return 0;
}
用scanf可以读入字符串
用scanf可以将字符串读入字符数组
scanf会自动添加结尾的'\0'
scanf读入到空格为止 cin读到'\0'为止

char line[100];
scanf("%s",line);	//注意不是$line 因为读的不是变量
printf("%s",line);

读入一行到字符串数组
cin.getLine(char buf[], int bufSize);
读入一行（行长度不超过bufSize-1）或bufSize-1个字符到buf，自动添加'\0'
回车换行符不会写入buf，但是会从输入流中去掉
buf[] 存放数组的字节 bufSize防止数组越界

char line[10];
cin.getLine(line ,bufSize(line));
//或 cin.getLine(line ,bufSize(10));读入最多9个字符到line
cout << line;
A b c /n回车不会读入 
A b c

A b c1234567\n回车不会读入
A b c1234