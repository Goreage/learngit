内置对象request常用方法如下：
*getProtocol() 获取用户向服务器提交信息所使用的通信协议，比如http/1.1等
*getServletPath() 获取用户请求的JSP页面文件的目录
*getContextPath() 获取用户请求的当前Web服务目录。
*getRemoteAddr() 获取用户的IP地址
*getRemoteHost() 获取用户机的名称（如果获取不到，就获取IP地址）。
*getServerName() 获取服务器的名称。
*getServerPort() 获取服务器的端口号。

    response对象
当用户访问一个服务器的页面时，会提交一个HTTP请求，服务器收到请求时，返回HTTP响应。
响应和请求类似，也有每种结构，每个响应都由状态行开始，可以包含几个头及可能的信息体（网页的结果输出部分）。
    与request对象相对应的对象是response对象。可以用response对象对用户的请求做出动态响应，向用户端发送数据。

    Response动态响应
    由于page指令只能为contentType指定一个值来决定响应MIME类型，如果想动态的改变这个属性的值来响应用户，就需要
    使用response对象的
setContenType(String s)方法来改变contenType的属性值，该方法中的参数s可取值:text/html text/plain,image/gif等
    当用setContenType方法动态改变了contenType的属性值，即响应的MIME类型，JSP引擎就会按着新的MIME类型将JSP页面
    的输出结果返回给用户。
Response重定向
    某些情况下，当响应用户时，需要将用户重新引导至另一个页面。列如，如果用户输入的表单信息不完整，就会在被引导到
    该表单的输入页面。
可以使用response的sendRedirect(URL url)方法实现用户的重定向。

session对象
    HTTP协议是一种无状态的协议，一个用户向服务器发出请求（request）,然后服务器返回响应（response）,在服务端
    不保留链接的有关信息，因此
当下一次连接时，服务器已经没有以前的连接信息了，无法判断这一次连接和以前的连接是否属于同一个用户。
    当一个用户访问一个Web服务目录时，可能会在这个服务目录的几个页面反复连接，反复刷新一个页面或不断地向一个页面
提交信息等，服务器应当通
过某种办法知道是同一个用户。
    Tomcat服务器可以使用内置session对象（会话）记录有关连接的信息，从一个客户打开浏览器连接到服务器开始。到客户
    关闭浏览器离开这个服务器
结束，被称为一个会话，Session对象在第一个JSP页面被装载时自动创建，完成会话管理。
session对象的id
    session对象被分配了一个String类型的id号，Tomcat服务器同时将这个id号发送到用户端，存放在用户的Cookie中。这样