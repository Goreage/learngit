    MySQL的启动与关闭
    net start mysql
    net stop mysql

    使用MYSQL
MYSQL登录/退出
    参数                           描述
    -D, --database = name       打开指定数据库
    --delimiter = name          指定分隔符
    -h, --host=name             服务器名称
    -p, --password[=name]       密码
    -P, --port=#                端口号
    --prompt = name            设置提示符
    -u,  --user=name            用户名
    -V， --version              输出版本信息并退出
    mysql -uroot -p -P3306 -h127.0.0.1  
MYSQL退出
mysql > exit;
mysql > quit;
mysql > \q;       
修改MYSQL提示符
    连接客户端通过参数指定
    shell>mysql -uroot -ppassword --prompt 提示符
    连接上客户端后，通过prompt命令修改
    mysql>prompt 提示符
    MySQL提示符
    参数                        描述
    \D                          完整日期
    \d                          当前数据库
    \h                          服务器名称
    \u                          当前用户
 MySQL常用命令
    显示当前服务器版本
    SELECT VERSION();
    显示当前日期时间
    SELECT NOW();
    显示当前用户
    SELECT USER();
MYSQL语句规范
    关键字与函数名称全部大写
    数据库名称，表名称，字段名称全部小写
    SQL语句必须以分号结尾 
    为了分清哪些是关键字，库的名字，字段的名字设置为小写
数据库操作
    创建数据库 花括号是必须要有的，分隔号是可以任意选择的，中括号是可有可无的
    CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name
    [DEFAULT] CHARACTER SET [=] charset_name
    CREATE DATABASE t1;
    CREATE DATABASE IF NOT EXISTS t1;/*创建已有的数据库用IF NOT EXISTS可以创建，但是会报错
    通过SHOW WARNIGNS;查看
    查看当前服务器下的数据库列表
    SHOW {DATABASES | SCHEMAS}
    [LIKE 'pattern' | WHERE expr]
    修改数据库
    ALTER {DATABASE | SCHEMA} [db_name]
    [DEFAULT] CHARACTER SET [=] charset_name;
    删除数据库
    DROP {DATABASE | SCHEMA} [IF EXISTS] db_name

数据类型与创建数据表
    数据类型
    数据类型是指列，存储过程参数，表达式和局部变量的数据特征，它
    决定了数据的存储格式，代表了不同的信息类型。
    整型
    数据类型         存储数据
    TINYINT         有符号值： -128到127(-2^7到2^7-1)
                    无符号值： 0到256（0到2^8-1）
    SMALLINT        有符号值：-32768到32767（-2^15到2^16-1）
                    无符号值： 0到65535（0到2^16-1）
    MEDIUMINT       有符号值： -8388608到8388607(-2^23到2^23-1)
                    无符号值： 0到16777215（0到2^24-1）
    INT             有符号值： -2147483648到2147483647(-2^31到2^31-1)
                    无符号值： 0到4294967295（0到2^32-1）
                    有符号值：-9223372036854775808到9223372036854775807(-2^31到2^31-1)
    BIGINT          无符号值：  0到18446744073709551615（0到2^64-1）
    
    浮点型
    数据类型         存储范围
    FLOAT[M,D]      -3.4028234+38到-1.175494354E-38, 0和1.175484351E-38到3.402823466E+38.
                    M是数字总位数，D是小数点后面的位数。如果M和D是小数点后面的位数。如果M和D做
                    省略，根据硬件允许的限制来保存值。单精度浮点数精确到大约7位小数点。
    DOUBLE[(M,D)]   -1.7976931348623157E+308到-2.2250738585072014E-308, 0和2.2250738585072014E-308
                    到1.7976931348623157E+308
    
    日期时间型
    列表型          存储需求
    YEAR            1
    TIME            3
    DATE            3
    DATETIME        8
    TIMESTAMP       4 1970-2037

    字符型
    列表型          存储需求
    CHAR(M)         M个字节，0<=M<=255
    VARCHAR(M)      L+1个字节，其中L<=M且0<=M<=65535
    TINYTEXT        L+1个字节，其中L<2^8
    TEXT            L+2个字节，其中L<2^16
    MEDIUMIEXT      L+3个字节，其中L<2^26
    LONGTEXT        L+4字节，其中L<2^32
    ENUM('value1','value2'....) 1或2个字节，取决于枚举值的个数（最多65,535个值）
    SET('value1','value2'...) 1,2,3,4或者8个字节，取决于set成员的数目（最多64个成员）
数据表（或称表）是数据库最重要的组成部分之一，是其他对象的基础。
    USE
    打开数据库
    USE数据库名称； 
    SELECT DATABASE();显示当前所在的数据表 
    创建数据表
        CREATE TABLE [IF NOT EXISTS] table_name(
            column_name data_type.
            ...
        )
    查看数据表列表
    SHOW TABLES [FROM db_name]
    [LIKE `pattern` | WHERE expr]
    查看数据表的结构
    SHOW COLUMNS FROM tb1_name
    插入记录
    INSERT [INTO] tb1_name [(col_name,...)] VALUES(val,..)
    全部插入    INSERT tb1 VALUES('TOM',25,7863.25);
    部分插入    INSERT tb1(username,salary) VALUES('John',4500.69);
    记录查找
    SELECT expr,...FROM tb1_name
    空值与非空
    NULL, 字段值可以为空
    NOT NULL,字段值禁止为空 
AUTO_INCREMENT
自动编号，且必须与主键组合使用
默认情况下，起始值为1，每次的增量为1
    PRIMARY KEY
    主键约束
    每张数据表只能存在一个主键
    主键保证记录的唯一性
    主键自动为NOT NULL
    UNIQUE KEY
    唯一约束
    唯一约束可以保证记录的唯一性
    唯一约束的字段可以为空值（NULL）
    每张数据表可以存在多个唯一约束
    DEFAULT
    默认值
    当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。

            字符型
数据类型     整型
            浮点型
            日期时间型

            插入记录
数据表操作   查找记录

记录操作      创建数据表
             约束的使用

MYSQL数据库
                整型
数据类型         浮点型
                字符型
                日期时间型 

            如何创建数据表
数据表操作   PRIMARY KEY(主键约束)
            UNIQUE KEY(唯一约束)
            DEFAULT(默认约束)
            NOT NULL(非空约束)
约束
1.约束保证数据的完整性和一致性。
2.约束分为表级约束和列级约束。
3.约束类型包括：
        NOT NULL(非空约束)
        PRIMARY KEY(主键约束)
        UNIQUE KEY(唯一约束)
        DEFAULT(默认约束)
        FORETGN KEY(外键约束)
FOREIGN KEY 
    保持数据一致性，完整性。
    实现一对一或一对多关系。
外键约束的要求
1.父表和子表必须使用相同的存储引擎，而且禁止使用临时表。
2.数据表的存储只能为InnoDB。
    MYSQL配置文件
    default-storage-engine=INNODB 
     CREATE TABLE provinces(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> pname VARCHAR(20) NOT NULL
    -> );
     SHOW CREATE TABLE provinces;
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table     | Create Table                                                                                                                                                              |
+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| provinces | CREATE TABLE `provinces` (
  `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
  `pname` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |

     CREATE TABLE users(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(10) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provinces(id)
    -> );
    SHOW INDEXES FROM provinces;//查询索引
     SHOW INDEXES FROM provinces\G; //将索引表格化
*************************** 1. row ***************************
        Table: provinces
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
Index_comment:

 SHOW INDEXES FROM users\G;

  SHOW CREATE TABLE users;
3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否
    外键约束的参照操作
    1.CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行
    2.SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列没有指定NOT NULL
    3.RESTRICT:拒绝对父表的删除或更新操作。
    4.NO ACTION:标准SQL的关键字，在MYSQL中与RESTRICT相同。
符号位必须相同；而字符的长度可以不同。
    标记约束与列级约束
    对一个数据列建立的约束，称为列级约束。
    对多个数据列建立的约束，称为标记约束。
    列级约束既可以在列定义时声明，也可以在列定以后声明、
    表级约束只能在列定义后声明。

    修改数据表
    添加单列
    ALTER TABLE tbl_name ADD [COLUMN] col_name 
    column_definitionp[FIRST | AFTER col_name]
    ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;
    ALTER TABLE users1 ADD password VARCHAR(32) NOT NULL AFTER username;
     ALTER TABLE users1 ADD truename VARCHAR(20) NOT NULL FIRST;
     SHOW COLUMNS FROM users1;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| truename | varchar(20)          | NO   |     | NULL    |                |
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(10)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
+----------+----------------------+------+-----+---------+----------------+、

    添加多列
    ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definition,...)
    删除列
    ALTER TABLE tbl_name DROP [COLUMN] col_name
    ALTER TABLE users1 DROP truename;
     ALTER TABLE users1 DROP password,DROP age;

    添加主键约束
    ALTER TABLE tb1_name ADD [CONSTAINT [symbol]]
    PRIMARY KEY [index_type](index_col_name,...)
    ALTER TABLE users2 ADD id smallint unsigned;
     SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   |     | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
 ALTER TABLE users2 ADD id smallint unsigned;
 SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   |     | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
| id       | smallint(5) unsigned | YES  |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
    添加唯一约束
    ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]]
    UNIQUE [INDEX|KEY] [index_name] [index_type]
    (index_col_name,...)
    ALTER TABLE users2 ADD age TINYINT UNSIGNED NOT NULL;
     SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   | UNI | NULL    |       |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |       |
| id       | smallint(5) unsigned | NO   | PRI | 0       |       |
| age      | tinyint(3) unsigned  | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+

    添加外键约束
    ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]]
    FOREIGN KEY [index_name] (index_col_name,...)
    reference_defintion
    添加/删除默认约束
    ALTER TABLE tbl_name ALTER [COLUMN] col_name
    {SET DEFAULT literal | DROP DEFAULT}

     ALTER TABLE users2 ALTER age SET DEFAULT 15;
      SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   | UNI | NULL    |       |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |       |
| id       | smallint(5) unsigned | NO   | PRI | 0       |       |
| age      | tinyint(3) unsigned  | NO   |     | 15      |       |
+----------+----------------------+------+-----+---------+-------+
ALTER TABLE users2 ALTER age DROP DEFAULT;
 SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   | UNI | NULL    |       |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |       |
| id       | smallint(5) unsigned | NO   | PRI | 0       |       |
| age      | tinyint(3) unsigned  | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+


    删除主键约束
    ALTER TABLE tbl_name DROP PRIMARY KEY
     ALTER TABLE users2 DROP PRIMARY KEY;
     SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   | UNI | NULL    |       |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |       |
| id       | smallint(5) unsigned | NO   | PRI | 0       |       |
| age      | tinyint(3) unsigned  | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+------

 SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| username | varchar(10)          | NO   | PRI | NULL    |       |
| pid      | smallint(5) unsigned | YES  | MUL | NULL    |       |
| id       | smallint(5) unsigned | NO   |     | 0       |       |
| age      | tinyint(3) unsigned  | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+

    删除唯一约束
    ALTER TABLE tbl_name DROP {INDED|KEY} index_name
    SHOW INDEXES FROM users2\G;
*************************** 1. row ***************************
        Table: users2
   Non_unique: 0
     Key_name: username
 Seq_in_index: 1
  Column_name: username
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null:
   Index_type: BTREE
      Comment:
       ALTER TABLE users2 DROP INDEX username;
       SHOW INDEXES FROM users\G;

    删除外键约束
    ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol
    SHOW CREATE TABLE users2;
     users2 | CREATE TABLE `users2` (
  `username` varchar(10) NOT NULL,
  `pid` smallint(5) unsigned DEFAULT NULL,
  `id` smallint(5) unsigned NOT NULL DEFAULT '0',
  `age` tinyint(3) unsigned NOT NULL,
  KEY `pid` (`pid`),
  CONSTRAINT `users2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
 ALTER TABLE users2 DROP FOREIGN KEY users2_ibfk_1;
  SHOW CREATE TABLE users2;
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table  | Create Table                                                                                                                                                                                                                                           |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| users2 | CREATE TABLE `users2` (
  `username` varchar(10) NOT NULL,
  `pid` smallint(5) unsigned DEFAULT NULL,
  `id` smallint(5) unsigned NOT NULL DEFAULT '0',
  `age` tinyint(3) unsigned NOT NULL,
  KEY `pid` (`pid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
 ALTER TABLE users2 DROP INDEX pid;
 删除索引pid

 修改列定义
 ALTER TABLE tbl_name MODIFY [COLUMN] col_name
 column_definition [FIRST | AFTER col_name]
  ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;    //字段数目的增加与删除
   `id` smallint(5) unsigned NOT NULL DEFAULT '0',
    SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| id       | smallint(5) unsigned | NO   |     | NULL    |       |
| username | varchar(10)          | NO   |     | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
| age      | tinyint(3) unsigned  | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+
ALTER TABLE users2 MODIFY id TINYINT UNSIGNED NOT NULL;
 SHOW COLUMNS FROM users2;
+----------+----------------------+------+-----+---------+-------+
| Field    | Type                 | Null | Key | Default | Extra |
+----------+----------------------+------+-----+---------+-------+
| id       | tinyint(3) unsigned  | NO   |     | NULL    |       |
| username | varchar(10)          | NO   |     | NULL    |       |
| pid      | smallint(5) unsigned | YES  |     | NULL    |       |
| age      | tinyint(3) unsigned  | NO   |     | NULL    |       |
+----------+----------------------+------+-----+---------+-------+

 修改列的名称
 ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name
 new_col_name column_defintion [FIRST | AFTER col_name]

 ALTER TABLE users2 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;
 SHOW COLUMNS FROM users2;
+----------+---------------------+------+-----+---------+-------+
| Field    | Type                | Null | Key | Default | Extra |
+----------+---------------------+------+-----+---------+-------+
| id       | tinyint(3) unsigned | NO   |     | NULL    |       |
| username | varchar(10)         | NO   |     | NULL    |       |
| p_id     | tinyint(3) unsigned | NO   |     | NULL    |       |
| age      | tinyint(3) unsigned | NO   |     | NULL    |       |
+----------+---------------------+------+-----+---------+-------+
 数据表更名
 方法1
    ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name
     SHOW TABLES;
+----------------+
| Tables_in_test |
+----------------+
| provinces      |
| tb1            |
| tb2            |
| tb3            |
| tb4            |
| tb5            |
| tb6            |
| users          |
| users1         |
| users3         |
     ALTER TABLE users2 RENAME users3;
方法2
    RENAME TABLE tbl_name TO new _tbl_name
    [, tbl_name2 TO new_tbl_name2]...
    
 RENAME TABLE users3 TO users2;
  SHOW TABLES;
+----------------+
| Tables_in_test |
+----------------+
| provinces      |
| tb1            |
| tb2            |
| tb3            |
| tb4            |
| tb5            |
| tb6            |
| users          |
| users1         |
| users2         |
+----------------+
4.外键列和参照列必须创建索引。如果外键列不存在索引的话，MYSQL将自动创建索引。
编辑数据表的默认存储引擎

第四章 操作数据表中的记录
    INSERT
    插入数据
    INSERT [INTO] tbl_name [(col_name,...)] {VALUES | VALUE}
    ({expr | DEFAULT,...},...)
     CREATE TABLE users4(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(20) NOT NULL,
    -> password VARCHAR(32) NOT NULL,
    -> age TINYINT UNSIGNED NOT NULL DEFAULT 10,
    -> sex BOOLEAN
    -> );
    INSERT users4 VALUES(NULL,'Tom','123','25',1);
    SELECT * FROM users4;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  25 |    1 |
+----+----------+----------+-----+------+
     INSERT users4 VALUES(NULL,'John','456','25',1);
      SELECT * FROM users4;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  25 |    1 |
|  2 | John     | 456      |  25 |    1 |
+----+----------+----------+-----+------+
    INSERT users4 VALUES(NULL,'Tom','123',3*7-5,1);
    SELECT * FROM users4;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  25 |    1 |
|  2 | John     | 456      |  25 |    1 |
|  3 | Tom      | 123      |  25 |    1 |
|  4 | Tom      | 123      |  16 |    1 |
|  5 | Tom      | 123      |  16 |    1 |
+----+----------+----------+-----+------+

    SHOW COLUMNS FROM users4;
+----------+----------------------+------+-----+---------+----------------+
| Field    | Type                 | Null | Key | Default | Extra          |
+----------+----------------------+------+-----+---------+----------------+
| id       | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |
| username | varchar(20)          | NO   |     | NULL    |                |
| password | varchar(32)          | NO   |     | NULL    |                |
| age      | tinyint(3) unsigned  | NO   |     | 10      |                |
| sex      | tinyint(1)           | YES  |     | NULL    |                |
+----------+----------------------+------+-----+---------+----------------+
    INSERT users4 VALUES(NULL,'Tom','123',DEFAULT,1);
    
mysql> SELECT * FROM users4;
+----+----------+----------+-----+------+
| id | username | password | age | sex  |
+----+----------+----------+-----+------+
|  1 | Tom      | 123      |  25 |    1 |
|  2 | John     | 456      |  25 |    1 |
|  3 | Tom      | 123      |  25 |    1 |
|  4 | Tom      | 123      |  16 |    1 |
|  5 | Tom      | 123      |  16 |    1 |
|  6 | Tom      | 123      |  10 |    1 |
+----+----------+----------+-----+------+
    INSERT users4 VALUES(NULL,'Tom','123',3*7+9,1),(NULL,'Rose',md5('123'),DEFAULT,0);
     SELECT * FROM users4;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  25 |    1 |
|  2 | John     | 456                              |  25 |    1 |
|  3 | Tom      | 123                              |  25 |    1 |
|  4 | Tom      | 123                              |  16 |    1 |
|  5 | Tom      | 123                              |  16 |    1 |
|  6 | Tom      | 123                              |  10 |    1 |
|  7 | Tom      | 123                              |  30 |    1 |
|  8 | Rose     | 202cb962ac59075b964b07152d234b70 |  10 |    0 |
+----+----------+----------------------------------+-----+------+
    INSERT
    插入记录
    INSERT [INTO] tbl_name SET col_name={expr | DEFAULT},...
    说明：与第一种方式的区别在于，此方法可以使用子查询(SubQuery)
    此方法只能一次插入一条数据
    INSERT users4 SET username='Ben',password='456';
     SELECT * FROM users4;
+----+----------+----------------------------------+-----+------+
| id | username | password                         | age | sex  |
+----+----------+----------------------------------+-----+------+
|  1 | Tom      | 123                              |  25 |    1 |
|  2 | John     | 456                              |  25 |    1 |
|  3 | Tom      | 123                              |  25 |    1 |
|  4 | Tom      | 123                              |  16 |    1 |
|  5 | Tom      | 123                              |  16 |    1 |
|  6 | Tom      | 123                              |  10 |    1 |
|  7 | Tom      | 123                              |  30 |    1 |
|  8 | Rose     | 202cb962ac59075b964b07152d234b70 |  10 |    0 |
|  9 | Ben      | 456                              |  10 | NULL |
+----+----------+----------------------------------+-----+------+
    
